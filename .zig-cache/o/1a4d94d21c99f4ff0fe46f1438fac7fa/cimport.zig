pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const sfBool = c_int;
pub const sfInt8 = i8;
pub const sfUint8 = u8;
pub const sfInt16 = c_short;
pub const sfUint16 = c_ushort;
pub const sfInt32 = c_int;
pub const sfUint32 = c_uint;
pub const sfInt64 = c_longlong;
pub const sfUint64 = c_ulonglong;
pub const struct_sfBuffer = opaque {};
pub const sfBuffer = struct_sfBuffer;
pub const struct_sfClock = opaque {};
pub const sfClock = struct_sfClock;
pub const struct_sfMutex = opaque {};
pub const sfMutex = struct_sfMutex;
pub const struct_sfThread = opaque {};
pub const sfThread = struct_sfThread;
pub const ptrdiff_t = c_longlong;
pub const wchar_t = c_ushort;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub extern fn sfBuffer_create() ?*sfBuffer;
pub extern fn sfBuffer_destroy(buffer: ?*sfBuffer) void;
pub extern fn sfBuffer_getSize(buffer: ?*const sfBuffer) usize;
pub extern fn sfBuffer_getData(buffer: ?*const sfBuffer) [*c]const sfUint8;
pub const sfTime = extern struct {
    microseconds: sfInt64 = @import("std").mem.zeroes(sfInt64),
};
pub extern var sfTime_Zero: sfTime;
pub extern fn sfTime_asSeconds(time: sfTime) f32;
pub extern fn sfTime_asMilliseconds(time: sfTime) sfInt32;
pub extern fn sfTime_asMicroseconds(time: sfTime) sfInt64;
pub extern fn sfSeconds(amount: f32) sfTime;
pub extern fn sfMilliseconds(amount: sfInt32) sfTime;
pub extern fn sfMicroseconds(amount: sfInt64) sfTime;
pub extern fn sfClock_create() ?*sfClock;
pub extern fn sfClock_copy(clock: ?*const sfClock) ?*sfClock;
pub extern fn sfClock_destroy(clock: ?*sfClock) void;
pub extern fn sfClock_getElapsedTime(clock: ?*const sfClock) sfTime;
pub extern fn sfClock_restart(clock: ?*sfClock) sfTime;
pub const sfInputStreamReadFunc = ?*const fn (?*anyopaque, sfInt64, ?*anyopaque) callconv(.C) sfInt64;
pub const sfInputStreamSeekFunc = ?*const fn (sfInt64, ?*anyopaque) callconv(.C) sfInt64;
pub const sfInputStreamTellFunc = ?*const fn (?*anyopaque) callconv(.C) sfInt64;
pub const sfInputStreamGetSizeFunc = ?*const fn (?*anyopaque) callconv(.C) sfInt64;
pub const struct_sfInputStream = extern struct {
    read: sfInputStreamReadFunc = @import("std").mem.zeroes(sfInputStreamReadFunc),
    seek: sfInputStreamSeekFunc = @import("std").mem.zeroes(sfInputStreamSeekFunc),
    tell: sfInputStreamTellFunc = @import("std").mem.zeroes(sfInputStreamTellFunc),
    getSize: sfInputStreamGetSizeFunc = @import("std").mem.zeroes(sfInputStreamGetSizeFunc),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const sfInputStream = struct_sfInputStream;
pub extern fn sfMutex_create() ?*sfMutex;
pub extern fn sfMutex_destroy(mutex: ?*sfMutex) void;
pub extern fn sfMutex_lock(mutex: ?*sfMutex) void;
pub extern fn sfMutex_unlock(mutex: ?*sfMutex) void;
pub extern fn sfSleep(duration: sfTime) void;
pub extern fn sfThread_create(function: ?*const fn (?*anyopaque) callconv(.C) void, userData: ?*anyopaque) ?*sfThread;
pub extern fn sfThread_destroy(thread: ?*sfThread) void;
pub extern fn sfThread_launch(thread: ?*sfThread) void;
pub extern fn sfThread_wait(thread: ?*sfThread) void;
pub extern fn sfThread_terminate(thread: ?*sfThread) void;
pub const sfVector2i = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfVector2u = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const sfVector2f = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const sfVector3f = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
};
pub const struct_sfContext = opaque {};
pub const sfContext = struct_sfContext;
pub const struct_sfCursor = opaque {};
pub const sfCursor = struct_sfCursor;
pub const struct_sfWindow = opaque {};
pub const sfWindow = struct_sfWindow;
pub const struct_sfWindowBase = opaque {};
pub const sfWindowBase = struct_sfWindowBase;
pub extern fn sfClipboard_getString() [*c]const u8;
pub extern fn sfClipboard_getUnicodeString() [*c]const sfUint32;
pub extern fn sfClipboard_setString(text: [*c]const u8) void;
pub extern fn sfClipboard_setUnicodeString(text: [*c]const sfUint32) void;
pub const sfJoystickIdentification = extern struct {
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    vendorId: c_uint = @import("std").mem.zeroes(c_uint),
    productId: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const sfJoystickCount: c_int = 8;
pub const sfJoystickButtonCount: c_int = 32;
pub const sfJoystickAxisCount: c_int = 8;
const enum_unnamed_1 = c_uint;
pub const sfJoystickX: c_int = 0;
pub const sfJoystickY: c_int = 1;
pub const sfJoystickZ: c_int = 2;
pub const sfJoystickR: c_int = 3;
pub const sfJoystickU: c_int = 4;
pub const sfJoystickV: c_int = 5;
pub const sfJoystickPovX: c_int = 6;
pub const sfJoystickPovY: c_int = 7;
pub const sfJoystickAxis = c_uint;
pub extern fn sfJoystick_isConnected(joystick: c_uint) sfBool;
pub extern fn sfJoystick_getButtonCount(joystick: c_uint) c_uint;
pub extern fn sfJoystick_hasAxis(joystick: c_uint, axis: sfJoystickAxis) sfBool;
pub extern fn sfJoystick_isButtonPressed(joystick: c_uint, button: c_uint) sfBool;
pub extern fn sfJoystick_getAxisPosition(joystick: c_uint, axis: sfJoystickAxis) f32;
pub extern fn sfJoystick_getIdentification(joystick: c_uint) sfJoystickIdentification;
pub extern fn sfJoystick_update() void;
pub const sfKeyUnknown: c_int = -1;
pub const sfKeyA: c_int = 0;
pub const sfKeyB: c_int = 1;
pub const sfKeyC: c_int = 2;
pub const sfKeyD: c_int = 3;
pub const sfKeyE: c_int = 4;
pub const sfKeyF: c_int = 5;
pub const sfKeyG: c_int = 6;
pub const sfKeyH: c_int = 7;
pub const sfKeyI: c_int = 8;
pub const sfKeyJ: c_int = 9;
pub const sfKeyK: c_int = 10;
pub const sfKeyL: c_int = 11;
pub const sfKeyM: c_int = 12;
pub const sfKeyN: c_int = 13;
pub const sfKeyO: c_int = 14;
pub const sfKeyP: c_int = 15;
pub const sfKeyQ: c_int = 16;
pub const sfKeyR: c_int = 17;
pub const sfKeyS: c_int = 18;
pub const sfKeyT: c_int = 19;
pub const sfKeyU: c_int = 20;
pub const sfKeyV: c_int = 21;
pub const sfKeyW: c_int = 22;
pub const sfKeyX: c_int = 23;
pub const sfKeyY: c_int = 24;
pub const sfKeyZ: c_int = 25;
pub const sfKeyNum0: c_int = 26;
pub const sfKeyNum1: c_int = 27;
pub const sfKeyNum2: c_int = 28;
pub const sfKeyNum3: c_int = 29;
pub const sfKeyNum4: c_int = 30;
pub const sfKeyNum5: c_int = 31;
pub const sfKeyNum6: c_int = 32;
pub const sfKeyNum7: c_int = 33;
pub const sfKeyNum8: c_int = 34;
pub const sfKeyNum9: c_int = 35;
pub const sfKeyEscape: c_int = 36;
pub const sfKeyLControl: c_int = 37;
pub const sfKeyLShift: c_int = 38;
pub const sfKeyLAlt: c_int = 39;
pub const sfKeyLSystem: c_int = 40;
pub const sfKeyRControl: c_int = 41;
pub const sfKeyRShift: c_int = 42;
pub const sfKeyRAlt: c_int = 43;
pub const sfKeyRSystem: c_int = 44;
pub const sfKeyMenu: c_int = 45;
pub const sfKeyLBracket: c_int = 46;
pub const sfKeyRBracket: c_int = 47;
pub const sfKeySemicolon: c_int = 48;
pub const sfKeyComma: c_int = 49;
pub const sfKeyPeriod: c_int = 50;
pub const sfKeyApostrophe: c_int = 51;
pub const sfKeySlash: c_int = 52;
pub const sfKeyBackslash: c_int = 53;
pub const sfKeyGrave: c_int = 54;
pub const sfKeyEqual: c_int = 55;
pub const sfKeyHyphen: c_int = 56;
pub const sfKeySpace: c_int = 57;
pub const sfKeyEnter: c_int = 58;
pub const sfKeyBackspace: c_int = 59;
pub const sfKeyTab: c_int = 60;
pub const sfKeyPageUp: c_int = 61;
pub const sfKeyPageDown: c_int = 62;
pub const sfKeyEnd: c_int = 63;
pub const sfKeyHome: c_int = 64;
pub const sfKeyInsert: c_int = 65;
pub const sfKeyDelete: c_int = 66;
pub const sfKeyAdd: c_int = 67;
pub const sfKeySubtract: c_int = 68;
pub const sfKeyMultiply: c_int = 69;
pub const sfKeyDivide: c_int = 70;
pub const sfKeyLeft: c_int = 71;
pub const sfKeyRight: c_int = 72;
pub const sfKeyUp: c_int = 73;
pub const sfKeyDown: c_int = 74;
pub const sfKeyNumpad0: c_int = 75;
pub const sfKeyNumpad1: c_int = 76;
pub const sfKeyNumpad2: c_int = 77;
pub const sfKeyNumpad3: c_int = 78;
pub const sfKeyNumpad4: c_int = 79;
pub const sfKeyNumpad5: c_int = 80;
pub const sfKeyNumpad6: c_int = 81;
pub const sfKeyNumpad7: c_int = 82;
pub const sfKeyNumpad8: c_int = 83;
pub const sfKeyNumpad9: c_int = 84;
pub const sfKeyF1: c_int = 85;
pub const sfKeyF2: c_int = 86;
pub const sfKeyF3: c_int = 87;
pub const sfKeyF4: c_int = 88;
pub const sfKeyF5: c_int = 89;
pub const sfKeyF6: c_int = 90;
pub const sfKeyF7: c_int = 91;
pub const sfKeyF8: c_int = 92;
pub const sfKeyF9: c_int = 93;
pub const sfKeyF10: c_int = 94;
pub const sfKeyF11: c_int = 95;
pub const sfKeyF12: c_int = 96;
pub const sfKeyF13: c_int = 97;
pub const sfKeyF14: c_int = 98;
pub const sfKeyF15: c_int = 99;
pub const sfKeyPause: c_int = 100;
pub const sfKeyCount: c_int = 101;
pub const sfKeyTilde: c_int = 54;
pub const sfKeyDash: c_int = 56;
pub const sfKeyBack: c_int = 59;
pub const sfKeyBackSlash: c_int = 53;
pub const sfKeySemiColon: c_int = 48;
pub const sfKeyReturn: c_int = 58;
pub const sfKeyQuote: c_int = 51;
pub const sfKeyCode = c_int;
pub const sfScanUnknown: c_int = -1;
pub const sfScanA: c_int = 0;
pub const sfScanB: c_int = 1;
pub const sfScanC: c_int = 2;
pub const sfScanD: c_int = 3;
pub const sfScanE: c_int = 4;
pub const sfScanF: c_int = 5;
pub const sfScanG: c_int = 6;
pub const sfScanH: c_int = 7;
pub const sfScanI: c_int = 8;
pub const sfScanJ: c_int = 9;
pub const sfScanK: c_int = 10;
pub const sfScanL: c_int = 11;
pub const sfScanM: c_int = 12;
pub const sfScanN: c_int = 13;
pub const sfScanO: c_int = 14;
pub const sfScanP: c_int = 15;
pub const sfScanQ: c_int = 16;
pub const sfScanR: c_int = 17;
pub const sfScanS: c_int = 18;
pub const sfScanT: c_int = 19;
pub const sfScanU: c_int = 20;
pub const sfScanV: c_int = 21;
pub const sfScanW: c_int = 22;
pub const sfScanX: c_int = 23;
pub const sfScanY: c_int = 24;
pub const sfScanZ: c_int = 25;
pub const sfScanNum1: c_int = 26;
pub const sfScanNum2: c_int = 27;
pub const sfScanNum3: c_int = 28;
pub const sfScanNum4: c_int = 29;
pub const sfScanNum5: c_int = 30;
pub const sfScanNum6: c_int = 31;
pub const sfScanNum7: c_int = 32;
pub const sfScanNum8: c_int = 33;
pub const sfScanNum9: c_int = 34;
pub const sfScanNum0: c_int = 35;
pub const sfScanEnter: c_int = 36;
pub const sfScanEscape: c_int = 37;
pub const sfScanBackspace: c_int = 38;
pub const sfScanTab: c_int = 39;
pub const sfScanSpace: c_int = 40;
pub const sfScanHyphen: c_int = 41;
pub const sfScanEqual: c_int = 42;
pub const sfScanLBracket: c_int = 43;
pub const sfScanRBracket: c_int = 44;
pub const sfScanBackslash: c_int = 45;
pub const sfScanSemicolon: c_int = 46;
pub const sfScanApostrophe: c_int = 47;
pub const sfScanGrave: c_int = 48;
pub const sfScanComma: c_int = 49;
pub const sfScanPeriod: c_int = 50;
pub const sfScanSlash: c_int = 51;
pub const sfScanF1: c_int = 52;
pub const sfScanF2: c_int = 53;
pub const sfScanF3: c_int = 54;
pub const sfScanF4: c_int = 55;
pub const sfScanF5: c_int = 56;
pub const sfScanF6: c_int = 57;
pub const sfScanF7: c_int = 58;
pub const sfScanF8: c_int = 59;
pub const sfScanF9: c_int = 60;
pub const sfScanF10: c_int = 61;
pub const sfScanF11: c_int = 62;
pub const sfScanF12: c_int = 63;
pub const sfScanF13: c_int = 64;
pub const sfScanF14: c_int = 65;
pub const sfScanF15: c_int = 66;
pub const sfScanF16: c_int = 67;
pub const sfScanF17: c_int = 68;
pub const sfScanF18: c_int = 69;
pub const sfScanF19: c_int = 70;
pub const sfScanF20: c_int = 71;
pub const sfScanF21: c_int = 72;
pub const sfScanF22: c_int = 73;
pub const sfScanF23: c_int = 74;
pub const sfScanF24: c_int = 75;
pub const sfScanCapsLock: c_int = 76;
pub const sfScanPrintScreen: c_int = 77;
pub const sfScanScrollLock: c_int = 78;
pub const sfScanPause: c_int = 79;
pub const sfScanInsert: c_int = 80;
pub const sfScanHome: c_int = 81;
pub const sfScanPageUp: c_int = 82;
pub const sfScanDelete: c_int = 83;
pub const sfScanEnd: c_int = 84;
pub const sfScanPageDown: c_int = 85;
pub const sfScanRight: c_int = 86;
pub const sfScanLeft: c_int = 87;
pub const sfScanDown: c_int = 88;
pub const sfScanUp: c_int = 89;
pub const sfScanNumLock: c_int = 90;
pub const sfScanNumpadDivide: c_int = 91;
pub const sfScanNumpadMultiply: c_int = 92;
pub const sfScanNumpadMinus: c_int = 93;
pub const sfScanNumpadPlus: c_int = 94;
pub const sfScanNumpadEqual: c_int = 95;
pub const sfScanNumpadEnter: c_int = 96;
pub const sfScanNumpadDecimal: c_int = 97;
pub const sfScanNumpad1: c_int = 98;
pub const sfScanNumpad2: c_int = 99;
pub const sfScanNumpad3: c_int = 100;
pub const sfScanNumpad4: c_int = 101;
pub const sfScanNumpad5: c_int = 102;
pub const sfScanNumpad6: c_int = 103;
pub const sfScanNumpad7: c_int = 104;
pub const sfScanNumpad8: c_int = 105;
pub const sfScanNumpad9: c_int = 106;
pub const sfScanNumpad0: c_int = 107;
pub const sfScanNonUsBackslash: c_int = 108;
pub const sfScanApplication: c_int = 109;
pub const sfScanExecute: c_int = 110;
pub const sfScanModeChange: c_int = 111;
pub const sfScanHelp: c_int = 112;
pub const sfScanMenu: c_int = 113;
pub const sfScanSelect: c_int = 114;
pub const sfScanRedo: c_int = 115;
pub const sfScanUndo: c_int = 116;
pub const sfScanCut: c_int = 117;
pub const sfScanCopy: c_int = 118;
pub const sfScanPaste: c_int = 119;
pub const sfScanVolumeMute: c_int = 120;
pub const sfScanVolumeUp: c_int = 121;
pub const sfScanVolumeDown: c_int = 122;
pub const sfScanMediaPlayPause: c_int = 123;
pub const sfScanMediaStop: c_int = 124;
pub const sfScanMediaNextTrack: c_int = 125;
pub const sfScanMediaPreviousTrack: c_int = 126;
pub const sfScanLControl: c_int = 127;
pub const sfScanLShift: c_int = 128;
pub const sfScanLAlt: c_int = 129;
pub const sfScanLSystem: c_int = 130;
pub const sfScanRControl: c_int = 131;
pub const sfScanRShift: c_int = 132;
pub const sfScanRAlt: c_int = 133;
pub const sfScanRSystem: c_int = 134;
pub const sfScanBack: c_int = 135;
pub const sfScanForward: c_int = 136;
pub const sfScanRefresh: c_int = 137;
pub const sfScanStop: c_int = 138;
pub const sfScanSearch: c_int = 139;
pub const sfScanFavorites: c_int = 140;
pub const sfScanHomePage: c_int = 141;
pub const sfScanLaunchApplication1: c_int = 142;
pub const sfScanLaunchApplication2: c_int = 143;
pub const sfScanLaunchMail: c_int = 144;
pub const sfScanLaunchMediaSelect: c_int = 145;
pub const sfScancodeCount: c_int = 146;
pub const sfScancode = c_int;
pub extern fn sfKeyboard_isKeyPressed(key: sfKeyCode) sfBool;
pub extern fn sfKeyboard_isScancodePressed(code: sfScancode) sfBool;
pub extern fn sfKeyboard_localize(code: sfScancode) sfKeyCode;
pub extern fn sfKeyboard_delocalize(key: sfKeyCode) sfScancode;
pub extern fn sfKeyboard_getDescription(code: sfScancode) [*c]const u8;
pub extern fn sfKeyboard_setVirtualKeyboardVisible(visible: sfBool) void;
pub const sfMouseLeft: c_int = 0;
pub const sfMouseRight: c_int = 1;
pub const sfMouseMiddle: c_int = 2;
pub const sfMouseXButton1: c_int = 3;
pub const sfMouseXButton2: c_int = 4;
pub const sfMouseButtonCount: c_int = 5;
pub const sfMouseButton = c_uint;
pub const sfMouseVerticalWheel: c_int = 0;
pub const sfMouseHorizontalWheel: c_int = 1;
pub const sfMouseWheel = c_uint;
pub extern fn sfMouse_isButtonPressed(button: sfMouseButton) sfBool;
pub extern fn sfMouse_getPosition(relativeTo: ?*const sfWindow) sfVector2i;
pub extern fn sfMouse_setPosition(position: sfVector2i, relativeTo: ?*const sfWindow) void;
pub extern fn sfMouse_getPositionWindowBase(relativeTo: ?*const sfWindowBase) sfVector2i;
pub extern fn sfMouse_setPositionWindowBase(position: sfVector2i, relativeTo: ?*const sfWindowBase) void;
pub const sfSensorAccelerometer: c_int = 0;
pub const sfSensorGyroscope: c_int = 1;
pub const sfSensorMagnetometer: c_int = 2;
pub const sfSensorGravity: c_int = 3;
pub const sfSensorUserAcceleration: c_int = 4;
pub const sfSensorOrientation: c_int = 5;
pub const sfSensorCount: c_int = 6;
pub const sfSensorType = c_uint;
pub extern fn sfSensor_isAvailable(sensor: sfSensorType) sfBool;
pub extern fn sfSensor_setEnabled(sensor: sfSensorType, enabled: sfBool) void;
pub extern fn sfSensor_getValue(sensor: sfSensorType) sfVector3f;
pub const sfEvtClosed: c_int = 0;
pub const sfEvtResized: c_int = 1;
pub const sfEvtLostFocus: c_int = 2;
pub const sfEvtGainedFocus: c_int = 3;
pub const sfEvtTextEntered: c_int = 4;
pub const sfEvtKeyPressed: c_int = 5;
pub const sfEvtKeyReleased: c_int = 6;
pub const sfEvtMouseWheelMoved: c_int = 7;
pub const sfEvtMouseWheelScrolled: c_int = 8;
pub const sfEvtMouseButtonPressed: c_int = 9;
pub const sfEvtMouseButtonReleased: c_int = 10;
pub const sfEvtMouseMoved: c_int = 11;
pub const sfEvtMouseEntered: c_int = 12;
pub const sfEvtMouseLeft: c_int = 13;
pub const sfEvtJoystickButtonPressed: c_int = 14;
pub const sfEvtJoystickButtonReleased: c_int = 15;
pub const sfEvtJoystickMoved: c_int = 16;
pub const sfEvtJoystickConnected: c_int = 17;
pub const sfEvtJoystickDisconnected: c_int = 18;
pub const sfEvtTouchBegan: c_int = 19;
pub const sfEvtTouchMoved: c_int = 20;
pub const sfEvtTouchEnded: c_int = 21;
pub const sfEvtSensorChanged: c_int = 22;
pub const sfEvtCount: c_int = 23;
pub const sfEventType = c_uint;
pub const sfKeyEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    code: sfKeyCode = @import("std").mem.zeroes(sfKeyCode),
    scancode: sfScancode = @import("std").mem.zeroes(sfScancode),
    alt: sfBool = @import("std").mem.zeroes(sfBool),
    control: sfBool = @import("std").mem.zeroes(sfBool),
    shift: sfBool = @import("std").mem.zeroes(sfBool),
    system: sfBool = @import("std").mem.zeroes(sfBool),
};
pub const sfTextEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    unicode: sfUint32 = @import("std").mem.zeroes(sfUint32),
};
pub const sfMouseMoveEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfMouseButtonEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    button: sfMouseButton = @import("std").mem.zeroes(sfMouseButton),
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfMouseWheelEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    delta: c_int = @import("std").mem.zeroes(c_int),
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfMouseWheelScrollEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    wheel: sfMouseWheel = @import("std").mem.zeroes(sfMouseWheel),
    delta: f32 = @import("std").mem.zeroes(f32),
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfJoystickMoveEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    joystickId: c_uint = @import("std").mem.zeroes(c_uint),
    axis: sfJoystickAxis = @import("std").mem.zeroes(sfJoystickAxis),
    position: f32 = @import("std").mem.zeroes(f32),
};
pub const sfJoystickButtonEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    joystickId: c_uint = @import("std").mem.zeroes(c_uint),
    button: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const sfJoystickConnectEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    joystickId: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const sfSizeEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    width: c_uint = @import("std").mem.zeroes(c_uint),
    height: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const sfTouchEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    finger: c_uint = @import("std").mem.zeroes(c_uint),
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfSensorEvent = extern struct {
    type: sfEventType = @import("std").mem.zeroes(sfEventType),
    sensorType: sfSensorType = @import("std").mem.zeroes(sfSensorType),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
};
pub const sfEvent = extern union {
    type: sfEventType,
    size: sfSizeEvent,
    key: sfKeyEvent,
    text: sfTextEvent,
    mouseMove: sfMouseMoveEvent,
    mouseButton: sfMouseButtonEvent,
    mouseWheel: sfMouseWheelEvent,
    mouseWheelScroll: sfMouseWheelScrollEvent,
    joystickMove: sfJoystickMoveEvent,
    joystickButton: sfJoystickButtonEvent,
    joystickConnect: sfJoystickConnectEvent,
    touch: sfTouchEvent,
    sensor: sfSensorEvent,
};
pub const sfVideoMode = extern struct {
    width: c_uint = @import("std").mem.zeroes(c_uint),
    height: c_uint = @import("std").mem.zeroes(c_uint),
    bitsPerPixel: c_uint = @import("std").mem.zeroes(c_uint),
};
pub extern fn sfVideoMode_getDesktopMode() sfVideoMode;
pub extern fn sfVideoMode_getFullscreenModes(count: [*c]usize) [*c]const sfVideoMode;
pub extern fn sfVideoMode_isValid(mode: sfVideoMode) sfBool;
pub const struct_HWND__ = opaque {};
pub const sfWindowHandle = ?*struct_HWND__;
pub const struct_VkInstance_T = opaque {};
pub const VkInstance = ?*struct_VkInstance_T;
pub const struct_VkSurfaceKHR_T = opaque {};
pub const VkSurfaceKHR = ?*struct_VkSurfaceKHR_T;
pub const struct_VkAllocationCallbacks = opaque {};
pub const VkAllocationCallbacks = struct_VkAllocationCallbacks;
pub const sfVulkanFunctionPointer = ?*const fn () callconv(.C) void;
pub extern fn sfVulkan_isAvailable(requireGraphics: sfBool) sfBool;
pub extern fn sfVulkan_getFunction(name: [*c]const u8) sfVulkanFunctionPointer;
pub extern fn sfVulkan_getGraphicsRequiredInstanceExtensions(count: [*c]usize) [*c]const [*c]const u8;
pub const sfNone: c_int = 0;
pub const sfTitlebar: c_int = 1;
pub const sfResize: c_int = 2;
pub const sfClose: c_int = 4;
pub const sfFullscreen: c_int = 8;
pub const sfDefaultStyle: c_int = 7;
pub const sfWindowStyle = c_uint;
pub extern fn sfWindowBase_create(mode: sfVideoMode, title: [*c]const u8, style: sfUint32) ?*sfWindowBase;
pub extern fn sfWindowBase_createUnicode(mode: sfVideoMode, title: [*c]const sfUint32, style: sfUint32) ?*sfWindowBase;
pub extern fn sfWindowBase_createFromHandle(handle: sfWindowHandle) ?*sfWindowBase;
pub extern fn sfWindowBase_destroy(windowBase: ?*sfWindowBase) void;
pub extern fn sfWindowBase_close(windowBase: ?*sfWindowBase) void;
pub extern fn sfWindowBase_isOpen(windowBase: ?*const sfWindowBase) sfBool;
pub extern fn sfWindowBase_pollEvent(windowBase: ?*sfWindowBase, event: [*c]sfEvent) sfBool;
pub extern fn sfWindowBase_waitEvent(windowBase: ?*sfWindowBase, event: [*c]sfEvent) sfBool;
pub extern fn sfWindowBase_getPosition(windowBase: ?*const sfWindowBase) sfVector2i;
pub extern fn sfWindowBase_setPosition(windowBase: ?*sfWindowBase, position: sfVector2i) void;
pub extern fn sfWindowBase_getSize(windowBase: ?*const sfWindowBase) sfVector2u;
pub extern fn sfWindowBase_setSize(windowBase: ?*sfWindowBase, size: sfVector2u) void;
pub extern fn sfWindowBase_setTitle(windowBase: ?*sfWindowBase, title: [*c]const u8) void;
pub extern fn sfWindowBase_setUnicodeTitle(windowBase: ?*sfWindowBase, title: [*c]const sfUint32) void;
pub extern fn sfWindowBase_setIcon(windowBase: ?*sfWindowBase, width: c_uint, height: c_uint, pixels: [*c]const sfUint8) void;
pub extern fn sfWindowBase_setVisible(windowBase: ?*sfWindowBase, visible: sfBool) void;
pub extern fn sfWindowBase_setMouseCursorVisible(windowBase: ?*sfWindowBase, visible: sfBool) void;
pub extern fn sfWindowBase_setMouseCursorGrabbed(windowBase: ?*sfWindowBase, grabbed: sfBool) void;
pub extern fn sfWindowBase_setMouseCursor(windowBase: ?*sfWindowBase, cursor: ?*const sfCursor) void;
pub extern fn sfWindowBase_setKeyRepeatEnabled(windowBase: ?*sfWindowBase, enabled: sfBool) void;
pub extern fn sfWindowBase_setJoystickThreshold(windowBase: ?*sfWindowBase, threshold: f32) void;
pub extern fn sfWindowBase_requestFocus(windowBase: ?*sfWindowBase) void;
pub extern fn sfWindowBase_hasFocus(windowBase: ?*const sfWindowBase) sfBool;
pub extern fn sfWindowBase_getSystemHandle(windowBase: ?*const sfWindowBase) sfWindowHandle;
pub extern fn sfWindowBase_createVulkanSurface(windowBase: ?*sfWindowBase, instance: [*c]const VkInstance, surface: [*c]VkSurfaceKHR, allocator: ?*const VkAllocationCallbacks) sfBool;
pub const sfContextDefault: c_int = 0;
pub const sfContextCore: c_int = 1;
pub const sfContextDebug: c_int = 4;
pub const sfContextAttribute = c_uint;
pub const sfContextSettings = extern struct {
    depthBits: c_uint = @import("std").mem.zeroes(c_uint),
    stencilBits: c_uint = @import("std").mem.zeroes(c_uint),
    antialiasingLevel: c_uint = @import("std").mem.zeroes(c_uint),
    majorVersion: c_uint = @import("std").mem.zeroes(c_uint),
    minorVersion: c_uint = @import("std").mem.zeroes(c_uint),
    attributeFlags: sfUint32 = @import("std").mem.zeroes(sfUint32),
    sRgbCapable: sfBool = @import("std").mem.zeroes(sfBool),
};
pub extern fn sfWindow_create(mode: sfVideoMode, title: [*c]const u8, style: sfUint32, settings: [*c]const sfContextSettings) ?*sfWindow;
pub extern fn sfWindow_createUnicode(mode: sfVideoMode, title: [*c]const sfUint32, style: sfUint32, settings: [*c]const sfContextSettings) ?*sfWindow;
pub extern fn sfWindow_createFromHandle(handle: sfWindowHandle, settings: [*c]const sfContextSettings) ?*sfWindow;
pub extern fn sfWindow_destroy(window: ?*sfWindow) void;
pub extern fn sfWindow_close(window: ?*sfWindow) void;
pub extern fn sfWindow_isOpen(window: ?*const sfWindow) sfBool;
pub extern fn sfWindow_getSettings(window: ?*const sfWindow) sfContextSettings;
pub extern fn sfWindow_pollEvent(window: ?*sfWindow, event: [*c]sfEvent) sfBool;
pub extern fn sfWindow_waitEvent(window: ?*sfWindow, event: [*c]sfEvent) sfBool;
pub extern fn sfWindow_getPosition(window: ?*const sfWindow) sfVector2i;
pub extern fn sfWindow_setPosition(window: ?*sfWindow, position: sfVector2i) void;
pub extern fn sfWindow_getSize(window: ?*const sfWindow) sfVector2u;
pub extern fn sfWindow_setSize(window: ?*sfWindow, size: sfVector2u) void;
pub extern fn sfWindow_setTitle(window: ?*sfWindow, title: [*c]const u8) void;
pub extern fn sfWindow_setUnicodeTitle(window: ?*sfWindow, title: [*c]const sfUint32) void;
pub extern fn sfWindow_setIcon(window: ?*sfWindow, width: c_uint, height: c_uint, pixels: [*c]const sfUint8) void;
pub extern fn sfWindow_setVisible(window: ?*sfWindow, visible: sfBool) void;
pub extern fn sfWindow_setVerticalSyncEnabled(window: ?*sfWindow, enabled: sfBool) void;
pub extern fn sfWindow_setMouseCursorVisible(window: ?*sfWindow, visible: sfBool) void;
pub extern fn sfWindow_setMouseCursorGrabbed(window: ?*sfWindow, grabbed: sfBool) void;
pub extern fn sfWindow_setMouseCursor(window: ?*sfWindow, cursor: ?*const sfCursor) void;
pub extern fn sfWindow_setKeyRepeatEnabled(window: ?*sfWindow, enabled: sfBool) void;
pub extern fn sfWindow_setFramerateLimit(window: ?*sfWindow, limit: c_uint) void;
pub extern fn sfWindow_setJoystickThreshold(window: ?*sfWindow, threshold: f32) void;
pub extern fn sfWindow_setActive(window: ?*sfWindow, active: sfBool) sfBool;
pub extern fn sfWindow_requestFocus(window: ?*sfWindow) void;
pub extern fn sfWindow_hasFocus(window: ?*const sfWindow) sfBool;
pub extern fn sfWindow_display(window: ?*sfWindow) void;
pub extern fn sfWindow_getSystemHandle(window: ?*const sfWindow) sfWindowHandle;
pub extern fn sfWindow_createVulkanSurface(window: ?*sfWindow, instance: [*c]const VkInstance, surface: [*c]VkSurfaceKHR, allocator: ?*const VkAllocationCallbacks) sfBool;
pub const GlFunctionPointer = ?*const fn () callconv(.C) void;
pub extern fn sfContext_create() ?*sfContext;
pub extern fn sfContext_destroy(context: ?*sfContext) void;
pub extern fn sfContext_isExtensionAvailable(name: [*c]const u8) sfBool;
pub extern fn sfContext_setActive(context: ?*sfContext, active: sfBool) sfBool;
pub extern fn sfContext_getFunction(name: [*c]const u8) GlFunctionPointer;
pub extern fn sfContext_getSettings(context: ?*const sfContext) sfContextSettings;
pub extern fn sfContext_getActiveContextId() sfUint64;
pub const sfCursorArrow: c_int = 0;
pub const sfCursorArrowWait: c_int = 1;
pub const sfCursorWait: c_int = 2;
pub const sfCursorText: c_int = 3;
pub const sfCursorHand: c_int = 4;
pub const sfCursorSizeHorizontal: c_int = 5;
pub const sfCursorSizeVertical: c_int = 6;
pub const sfCursorSizeTopLeftBottomRight: c_int = 7;
pub const sfCursorSizeBottomLeftTopRight: c_int = 8;
pub const sfCursorSizeLeft: c_int = 9;
pub const sfCursorSizeRight: c_int = 10;
pub const sfCursorSizeTop: c_int = 11;
pub const sfCursorSizeBottom: c_int = 12;
pub const sfCursorSizeTopLeft: c_int = 13;
pub const sfCursorSizeBottomRight: c_int = 14;
pub const sfCursorSizeBottomLeft: c_int = 15;
pub const sfCursorSizeTopRight: c_int = 16;
pub const sfCursorSizeAll: c_int = 17;
pub const sfCursorCross: c_int = 18;
pub const sfCursorHelp: c_int = 19;
pub const sfCursorNotAllowed: c_int = 20;
pub const sfCursorType = c_uint;
pub extern fn sfCursor_createFromPixels(pixels: [*c]const sfUint8, size: sfVector2u, hotspot: sfVector2u) ?*sfCursor;
pub extern fn sfCursor_createFromSystem(@"type": sfCursorType) ?*sfCursor;
pub extern fn sfCursor_destroy(cursor: ?*sfCursor) void;
pub extern fn sfTouch_isDown(finger: c_uint) sfBool;
pub extern fn sfTouch_getPosition(finger: c_uint, relativeTo: ?*const sfWindow) sfVector2i;
pub extern fn sfTouch_getPositionWindowBase(finger: c_uint, relativeTo: ?*const sfWindowBase) sfVector2i;
pub const sfBlendFactorZero: c_int = 0;
pub const sfBlendFactorOne: c_int = 1;
pub const sfBlendFactorSrcColor: c_int = 2;
pub const sfBlendFactorOneMinusSrcColor: c_int = 3;
pub const sfBlendFactorDstColor: c_int = 4;
pub const sfBlendFactorOneMinusDstColor: c_int = 5;
pub const sfBlendFactorSrcAlpha: c_int = 6;
pub const sfBlendFactorOneMinusSrcAlpha: c_int = 7;
pub const sfBlendFactorDstAlpha: c_int = 8;
pub const sfBlendFactorOneMinusDstAlpha: c_int = 9;
pub const sfBlendFactor = c_uint;
pub const sfBlendEquationAdd: c_int = 0;
pub const sfBlendEquationSubtract: c_int = 1;
pub const sfBlendEquationReverseSubtract: c_int = 2;
pub const sfBlendEquationMin: c_int = 3;
pub const sfBlendEquationMax: c_int = 4;
pub const sfBlendEquation = c_uint;
pub const sfBlendMode = extern struct {
    colorSrcFactor: sfBlendFactor = @import("std").mem.zeroes(sfBlendFactor),
    colorDstFactor: sfBlendFactor = @import("std").mem.zeroes(sfBlendFactor),
    colorEquation: sfBlendEquation = @import("std").mem.zeroes(sfBlendEquation),
    alphaSrcFactor: sfBlendFactor = @import("std").mem.zeroes(sfBlendFactor),
    alphaDstFactor: sfBlendFactor = @import("std").mem.zeroes(sfBlendFactor),
    alphaEquation: sfBlendEquation = @import("std").mem.zeroes(sfBlendEquation),
};
pub extern const sfBlendAlpha: sfBlendMode;
pub extern const sfBlendAdd: sfBlendMode;
pub extern const sfBlendMultiply: sfBlendMode;
pub extern const sfBlendMin: sfBlendMode;
pub extern const sfBlendMax: sfBlendMode;
pub extern const sfBlendNone: sfBlendMode;
pub const sfColor = extern struct {
    r: sfUint8 = @import("std").mem.zeroes(sfUint8),
    g: sfUint8 = @import("std").mem.zeroes(sfUint8),
    b: sfUint8 = @import("std").mem.zeroes(sfUint8),
    a: sfUint8 = @import("std").mem.zeroes(sfUint8),
};
pub extern var sfBlack: sfColor;
pub extern var sfWhite: sfColor;
pub extern var sfRed: sfColor;
pub extern var sfGreen: sfColor;
pub extern var sfBlue: sfColor;
pub extern var sfYellow: sfColor;
pub extern var sfMagenta: sfColor;
pub extern var sfCyan: sfColor;
pub extern var sfTransparent: sfColor;
pub extern fn sfColor_fromRGB(red: sfUint8, green: sfUint8, blue: sfUint8) sfColor;
pub extern fn sfColor_fromRGBA(red: sfUint8, green: sfUint8, blue: sfUint8, alpha: sfUint8) sfColor;
pub extern fn sfColor_fromInteger(color: sfUint32) sfColor;
pub extern fn sfColor_toInteger(color: sfColor) sfUint32;
pub extern fn sfColor_add(color1: sfColor, color2: sfColor) sfColor;
pub extern fn sfColor_subtract(color1: sfColor, color2: sfColor) sfColor;
pub extern fn sfColor_modulate(color1: sfColor, color2: sfColor) sfColor;
pub const sfFloatRect = extern struct {
    left: f32 = @import("std").mem.zeroes(f32),
    top: f32 = @import("std").mem.zeroes(f32),
    width: f32 = @import("std").mem.zeroes(f32),
    height: f32 = @import("std").mem.zeroes(f32),
};
pub const sfIntRect = extern struct {
    left: c_int = @import("std").mem.zeroes(c_int),
    top: c_int = @import("std").mem.zeroes(c_int),
    width: c_int = @import("std").mem.zeroes(c_int),
    height: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn sfFloatRect_contains(rect: [*c]const sfFloatRect, x: f32, y: f32) sfBool;
pub extern fn sfIntRect_contains(rect: [*c]const sfIntRect, x: c_int, y: c_int) sfBool;
pub extern fn sfFloatRect_intersects(rect1: [*c]const sfFloatRect, rect2: [*c]const sfFloatRect, intersection: [*c]sfFloatRect) sfBool;
pub extern fn sfIntRect_intersects(rect1: [*c]const sfIntRect, rect2: [*c]const sfIntRect, intersection: [*c]sfIntRect) sfBool;
pub extern fn sfFloatRect_getPosition(rect: [*c]const sfFloatRect) sfVector2f;
pub extern fn sfIntRect_getPosition(rect: [*c]const sfIntRect) sfVector2i;
pub extern fn sfFloatRect_getSize(rect: [*c]const sfFloatRect) sfVector2f;
pub extern fn sfIntRect_getSize(rect: [*c]const sfIntRect) sfVector2i;
pub const struct_sfCircleShape = opaque {};
pub const sfCircleShape = struct_sfCircleShape;
pub const struct_sfConvexShape = opaque {};
pub const sfConvexShape = struct_sfConvexShape;
pub const struct_sfFont = opaque {};
pub const sfFont = struct_sfFont;
pub const struct_sfImage = opaque {};
pub const sfImage = struct_sfImage;
pub const struct_sfShader = opaque {};
pub const sfShader = struct_sfShader;
pub const struct_sfRectangleShape = opaque {};
pub const sfRectangleShape = struct_sfRectangleShape;
pub const struct_sfRenderTexture = opaque {};
pub const sfRenderTexture = struct_sfRenderTexture;
pub const struct_sfRenderWindow = opaque {};
pub const sfRenderWindow = struct_sfRenderWindow;
pub const struct_sfShape = opaque {};
pub const sfShape = struct_sfShape;
pub const struct_sfSprite = opaque {};
pub const sfSprite = struct_sfSprite;
pub const struct_sfText = opaque {};
pub const sfText = struct_sfText;
pub const struct_sfTexture = opaque {};
pub const sfTexture = struct_sfTexture;
pub const struct_sfTransformable = opaque {};
pub const sfTransformable = struct_sfTransformable;
pub const struct_sfVertexArray = opaque {};
pub const sfVertexArray = struct_sfVertexArray;
pub const struct_sfVertexBuffer = opaque {};
pub const sfVertexBuffer = struct_sfVertexBuffer;
pub const struct_sfView = opaque {};
pub const sfView = struct_sfView;
pub const sfTransform = extern struct {
    matrix: [9]f32 = @import("std").mem.zeroes([9]f32),
};
pub extern const sfTransform_Identity: sfTransform;
pub extern fn sfTransform_fromMatrix(a00: f32, a01: f32, a02: f32, a10: f32, a11: f32, a12: f32, a20: f32, a21: f32, a22: f32) sfTransform;
pub extern fn sfTransform_getMatrix(transform: [*c]const sfTransform, matrix: [*c]f32) void;
pub extern fn sfTransform_getInverse(transform: [*c]const sfTransform) sfTransform;
pub extern fn sfTransform_transformPoint(transform: [*c]const sfTransform, point: sfVector2f) sfVector2f;
pub extern fn sfTransform_transformRect(transform: [*c]const sfTransform, rectangle: sfFloatRect) sfFloatRect;
pub extern fn sfTransform_combine(transform: [*c]sfTransform, other: [*c]const sfTransform) void;
pub extern fn sfTransform_translate(transform: [*c]sfTransform, x: f32, y: f32) void;
pub extern fn sfTransform_rotate(transform: [*c]sfTransform, angle: f32) void;
pub extern fn sfTransform_rotateWithCenter(transform: [*c]sfTransform, angle: f32, centerX: f32, centerY: f32) void;
pub extern fn sfTransform_scale(transform: [*c]sfTransform, scaleX: f32, scaleY: f32) void;
pub extern fn sfTransform_scaleWithCenter(transform: [*c]sfTransform, scaleX: f32, scaleY: f32, centerX: f32, centerY: f32) void;
pub extern fn sfTransform_equal(left: [*c]sfTransform, right: [*c]sfTransform) sfBool;
pub extern fn sfCircleShape_create() ?*sfCircleShape;
pub extern fn sfCircleShape_copy(shape: ?*const sfCircleShape) ?*sfCircleShape;
pub extern fn sfCircleShape_destroy(shape: ?*sfCircleShape) void;
pub extern fn sfCircleShape_setPosition(shape: ?*sfCircleShape, position: sfVector2f) void;
pub extern fn sfCircleShape_setRotation(shape: ?*sfCircleShape, angle: f32) void;
pub extern fn sfCircleShape_setScale(shape: ?*sfCircleShape, scale: sfVector2f) void;
pub extern fn sfCircleShape_setOrigin(shape: ?*sfCircleShape, origin: sfVector2f) void;
pub extern fn sfCircleShape_getPosition(shape: ?*const sfCircleShape) sfVector2f;
pub extern fn sfCircleShape_getRotation(shape: ?*const sfCircleShape) f32;
pub extern fn sfCircleShape_getScale(shape: ?*const sfCircleShape) sfVector2f;
pub extern fn sfCircleShape_getOrigin(shape: ?*const sfCircleShape) sfVector2f;
pub extern fn sfCircleShape_move(shape: ?*sfCircleShape, offset: sfVector2f) void;
pub extern fn sfCircleShape_rotate(shape: ?*sfCircleShape, angle: f32) void;
pub extern fn sfCircleShape_scale(shape: ?*sfCircleShape, factors: sfVector2f) void;
pub extern fn sfCircleShape_getTransform(shape: ?*const sfCircleShape) sfTransform;
pub extern fn sfCircleShape_getInverseTransform(shape: ?*const sfCircleShape) sfTransform;
pub extern fn sfCircleShape_setTexture(shape: ?*sfCircleShape, texture: ?*const sfTexture, resetRect: sfBool) void;
pub extern fn sfCircleShape_setTextureRect(shape: ?*sfCircleShape, rect: sfIntRect) void;
pub extern fn sfCircleShape_setFillColor(shape: ?*sfCircleShape, color: sfColor) void;
pub extern fn sfCircleShape_setOutlineColor(shape: ?*sfCircleShape, color: sfColor) void;
pub extern fn sfCircleShape_setOutlineThickness(shape: ?*sfCircleShape, thickness: f32) void;
pub extern fn sfCircleShape_getTexture(shape: ?*const sfCircleShape) ?*const sfTexture;
pub extern fn sfCircleShape_getTextureRect(shape: ?*const sfCircleShape) sfIntRect;
pub extern fn sfCircleShape_getFillColor(shape: ?*const sfCircleShape) sfColor;
pub extern fn sfCircleShape_getOutlineColor(shape: ?*const sfCircleShape) sfColor;
pub extern fn sfCircleShape_getOutlineThickness(shape: ?*const sfCircleShape) f32;
pub extern fn sfCircleShape_getPointCount(shape: ?*const sfCircleShape) usize;
pub extern fn sfCircleShape_getPoint(shape: ?*const sfCircleShape, index: usize) sfVector2f;
pub extern fn sfCircleShape_setRadius(shape: ?*sfCircleShape, radius: f32) void;
pub extern fn sfCircleShape_getRadius(shape: ?*const sfCircleShape) f32;
pub extern fn sfCircleShape_setPointCount(shape: ?*sfCircleShape, count: usize) void;
pub extern fn sfCircleShape_getLocalBounds(shape: ?*const sfCircleShape) sfFloatRect;
pub extern fn sfCircleShape_getGlobalBounds(shape: ?*const sfCircleShape) sfFloatRect;
pub extern fn sfConvexShape_create() ?*sfConvexShape;
pub extern fn sfConvexShape_copy(shape: ?*const sfConvexShape) ?*sfConvexShape;
pub extern fn sfConvexShape_destroy(shape: ?*sfConvexShape) void;
pub extern fn sfConvexShape_setPosition(shape: ?*sfConvexShape, position: sfVector2f) void;
pub extern fn sfConvexShape_setRotation(shape: ?*sfConvexShape, angle: f32) void;
pub extern fn sfConvexShape_setScale(shape: ?*sfConvexShape, scale: sfVector2f) void;
pub extern fn sfConvexShape_setOrigin(shape: ?*sfConvexShape, origin: sfVector2f) void;
pub extern fn sfConvexShape_getPosition(shape: ?*const sfConvexShape) sfVector2f;
pub extern fn sfConvexShape_getRotation(shape: ?*const sfConvexShape) f32;
pub extern fn sfConvexShape_getScale(shape: ?*const sfConvexShape) sfVector2f;
pub extern fn sfConvexShape_getOrigin(shape: ?*const sfConvexShape) sfVector2f;
pub extern fn sfConvexShape_move(shape: ?*sfConvexShape, offset: sfVector2f) void;
pub extern fn sfConvexShape_rotate(shape: ?*sfConvexShape, angle: f32) void;
pub extern fn sfConvexShape_scale(shape: ?*sfConvexShape, factors: sfVector2f) void;
pub extern fn sfConvexShape_getTransform(shape: ?*const sfConvexShape) sfTransform;
pub extern fn sfConvexShape_getInverseTransform(shape: ?*const sfConvexShape) sfTransform;
pub extern fn sfConvexShape_setTexture(shape: ?*sfConvexShape, texture: ?*const sfTexture, resetRect: sfBool) void;
pub extern fn sfConvexShape_setTextureRect(shape: ?*sfConvexShape, rect: sfIntRect) void;
pub extern fn sfConvexShape_setFillColor(shape: ?*sfConvexShape, color: sfColor) void;
pub extern fn sfConvexShape_setOutlineColor(shape: ?*sfConvexShape, color: sfColor) void;
pub extern fn sfConvexShape_setOutlineThickness(shape: ?*sfConvexShape, thickness: f32) void;
pub extern fn sfConvexShape_getTexture(shape: ?*const sfConvexShape) ?*const sfTexture;
pub extern fn sfConvexShape_getTextureRect(shape: ?*const sfConvexShape) sfIntRect;
pub extern fn sfConvexShape_getFillColor(shape: ?*const sfConvexShape) sfColor;
pub extern fn sfConvexShape_getOutlineColor(shape: ?*const sfConvexShape) sfColor;
pub extern fn sfConvexShape_getOutlineThickness(shape: ?*const sfConvexShape) f32;
pub extern fn sfConvexShape_getPointCount(shape: ?*const sfConvexShape) usize;
pub extern fn sfConvexShape_getPoint(shape: ?*const sfConvexShape, index: usize) sfVector2f;
pub extern fn sfConvexShape_setPointCount(shape: ?*sfConvexShape, count: usize) void;
pub extern fn sfConvexShape_setPoint(shape: ?*sfConvexShape, index: usize, point: sfVector2f) void;
pub extern fn sfConvexShape_getLocalBounds(shape: ?*const sfConvexShape) sfFloatRect;
pub extern fn sfConvexShape_getGlobalBounds(shape: ?*const sfConvexShape) sfFloatRect;
pub const sfFontInfo = extern struct {
    family: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const sfGlyph = extern struct {
    advance: f32 = @import("std").mem.zeroes(f32),
    bounds: sfFloatRect = @import("std").mem.zeroes(sfFloatRect),
    textureRect: sfIntRect = @import("std").mem.zeroes(sfIntRect),
};
pub extern fn sfFont_createFromFile(filename: [*c]const u8) ?*sfFont;
pub extern fn sfFont_createFromMemory(data: ?*const anyopaque, sizeInBytes: usize) ?*sfFont;
pub extern fn sfFont_createFromStream(stream: [*c]sfInputStream) ?*sfFont;
pub extern fn sfFont_copy(font: ?*const sfFont) ?*sfFont;
pub extern fn sfFont_destroy(font: ?*sfFont) void;
pub extern fn sfFont_getGlyph(font: ?*const sfFont, codePoint: sfUint32, characterSize: c_uint, bold: sfBool, outlineThickness: f32) sfGlyph;
pub extern fn sfFont_hasGlyph(font: ?*const sfFont, codePoint: sfUint32) sfBool;
pub extern fn sfFont_getKerning(font: ?*const sfFont, first: sfUint32, second: sfUint32, characterSize: c_uint) f32;
pub extern fn sfFont_getBoldKerning(font: ?*const sfFont, first: sfUint32, second: sfUint32, characterSize: c_uint) f32;
pub extern fn sfFont_getLineSpacing(font: ?*const sfFont, characterSize: c_uint) f32;
pub extern fn sfFont_getUnderlinePosition(font: ?*const sfFont, characterSize: c_uint) f32;
pub extern fn sfFont_getUnderlineThickness(font: ?*const sfFont, characterSize: c_uint) f32;
pub extern fn sfFont_getTexture(font: ?*sfFont, characterSize: c_uint) ?*const sfTexture;
pub extern fn sfFont_setSmooth(font: ?*sfFont, smooth: sfBool) void;
pub extern fn sfFont_isSmooth(font: ?*const sfFont) sfBool;
pub extern fn sfFont_getInfo(font: ?*const sfFont) sfFontInfo;
pub extern fn sfImage_create(width: c_uint, height: c_uint) ?*sfImage;
pub extern fn sfImage_createFromColor(width: c_uint, height: c_uint, color: sfColor) ?*sfImage;
pub extern fn sfImage_createFromPixels(width: c_uint, height: c_uint, pixels: [*c]const sfUint8) ?*sfImage;
pub extern fn sfImage_createFromFile(filename: [*c]const u8) ?*sfImage;
pub extern fn sfImage_createFromMemory(data: ?*const anyopaque, size: usize) ?*sfImage;
pub extern fn sfImage_createFromStream(stream: [*c]sfInputStream) ?*sfImage;
pub extern fn sfImage_copy(image: ?*const sfImage) ?*sfImage;
pub extern fn sfImage_destroy(image: ?*sfImage) void;
pub extern fn sfImage_saveToFile(image: ?*const sfImage, filename: [*c]const u8) sfBool;
pub extern fn sfImage_saveToMemory(image: ?*const sfImage, output: ?*sfBuffer, format: [*c]const u8) sfBool;
pub extern fn sfImage_getSize(image: ?*const sfImage) sfVector2u;
pub extern fn sfImage_createMaskFromColor(image: ?*sfImage, color: sfColor, alpha: sfUint8) void;
pub extern fn sfImage_copyImage(image: ?*sfImage, source: ?*const sfImage, destX: c_uint, destY: c_uint, sourceRect: sfIntRect, applyAlpha: sfBool) void;
pub extern fn sfImage_setPixel(image: ?*sfImage, x: c_uint, y: c_uint, color: sfColor) void;
pub extern fn sfImage_getPixel(image: ?*const sfImage, x: c_uint, y: c_uint) sfColor;
pub extern fn sfImage_getPixelsPtr(image: ?*const sfImage) [*c]const sfUint8;
pub extern fn sfImage_flipHorizontally(image: ?*sfImage) void;
pub extern fn sfImage_flipVertically(image: ?*sfImage) void;
pub const sfPoints: c_int = 0;
pub const sfLines: c_int = 1;
pub const sfLineStrip: c_int = 2;
pub const sfTriangles: c_int = 3;
pub const sfTriangleStrip: c_int = 4;
pub const sfTriangleFan: c_int = 5;
pub const sfQuads: c_int = 6;
pub const sfLinesStrip: c_int = 2;
pub const sfTrianglesStrip: c_int = 4;
pub const sfTrianglesFan: c_int = 5;
pub const sfPrimitiveType = c_uint;
pub extern fn sfRectangleShape_create() ?*sfRectangleShape;
pub extern fn sfRectangleShape_copy(shape: ?*const sfRectangleShape) ?*sfRectangleShape;
pub extern fn sfRectangleShape_destroy(shape: ?*sfRectangleShape) void;
pub extern fn sfRectangleShape_setPosition(shape: ?*sfRectangleShape, position: sfVector2f) void;
pub extern fn sfRectangleShape_setRotation(shape: ?*sfRectangleShape, angle: f32) void;
pub extern fn sfRectangleShape_setScale(shape: ?*sfRectangleShape, scale: sfVector2f) void;
pub extern fn sfRectangleShape_setOrigin(shape: ?*sfRectangleShape, origin: sfVector2f) void;
pub extern fn sfRectangleShape_getPosition(shape: ?*const sfRectangleShape) sfVector2f;
pub extern fn sfRectangleShape_getRotation(shape: ?*const sfRectangleShape) f32;
pub extern fn sfRectangleShape_getScale(shape: ?*const sfRectangleShape) sfVector2f;
pub extern fn sfRectangleShape_getOrigin(shape: ?*const sfRectangleShape) sfVector2f;
pub extern fn sfRectangleShape_move(shape: ?*sfRectangleShape, offset: sfVector2f) void;
pub extern fn sfRectangleShape_rotate(shape: ?*sfRectangleShape, angle: f32) void;
pub extern fn sfRectangleShape_scale(shape: ?*sfRectangleShape, factors: sfVector2f) void;
pub extern fn sfRectangleShape_getTransform(shape: ?*const sfRectangleShape) sfTransform;
pub extern fn sfRectangleShape_getInverseTransform(shape: ?*const sfRectangleShape) sfTransform;
pub extern fn sfRectangleShape_setTexture(shape: ?*sfRectangleShape, texture: ?*const sfTexture, resetRect: sfBool) void;
pub extern fn sfRectangleShape_setTextureRect(shape: ?*sfRectangleShape, rect: sfIntRect) void;
pub extern fn sfRectangleShape_setFillColor(shape: ?*sfRectangleShape, color: sfColor) void;
pub extern fn sfRectangleShape_setOutlineColor(shape: ?*sfRectangleShape, color: sfColor) void;
pub extern fn sfRectangleShape_setOutlineThickness(shape: ?*sfRectangleShape, thickness: f32) void;
pub extern fn sfRectangleShape_getTexture(shape: ?*const sfRectangleShape) ?*const sfTexture;
pub extern fn sfRectangleShape_getTextureRect(shape: ?*const sfRectangleShape) sfIntRect;
pub extern fn sfRectangleShape_getFillColor(shape: ?*const sfRectangleShape) sfColor;
pub extern fn sfRectangleShape_getOutlineColor(shape: ?*const sfRectangleShape) sfColor;
pub extern fn sfRectangleShape_getOutlineThickness(shape: ?*const sfRectangleShape) f32;
pub extern fn sfRectangleShape_getPointCount(shape: ?*const sfRectangleShape) usize;
pub extern fn sfRectangleShape_getPoint(shape: ?*const sfRectangleShape, index: usize) sfVector2f;
pub extern fn sfRectangleShape_setSize(shape: ?*sfRectangleShape, size: sfVector2f) void;
pub extern fn sfRectangleShape_getSize(shape: ?*const sfRectangleShape) sfVector2f;
pub extern fn sfRectangleShape_getLocalBounds(shape: ?*const sfRectangleShape) sfFloatRect;
pub extern fn sfRectangleShape_getGlobalBounds(shape: ?*const sfRectangleShape) sfFloatRect;
pub const sfRenderStates = extern struct {
    blendMode: sfBlendMode = @import("std").mem.zeroes(sfBlendMode),
    transform: sfTransform = @import("std").mem.zeroes(sfTransform),
    texture: ?*const sfTexture = @import("std").mem.zeroes(?*const sfTexture),
    shader: ?*const sfShader = @import("std").mem.zeroes(?*const sfShader),
};
pub extern fn sfRenderStates_default() sfRenderStates;
pub const sfVertex = extern struct {
    position: sfVector2f = @import("std").mem.zeroes(sfVector2f),
    color: sfColor = @import("std").mem.zeroes(sfColor),
    texCoords: sfVector2f = @import("std").mem.zeroes(sfVector2f),
};
pub extern fn sfRenderTexture_create(width: c_uint, height: c_uint, depthBuffer: sfBool) ?*sfRenderTexture;
pub extern fn sfRenderTexture_createWithSettings(width: c_uint, height: c_uint, settings: [*c]const sfContextSettings) ?*sfRenderTexture;
pub extern fn sfRenderTexture_destroy(renderTexture: ?*sfRenderTexture) void;
pub extern fn sfRenderTexture_getSize(renderTexture: ?*const sfRenderTexture) sfVector2u;
pub extern fn sfRenderTexture_isSrgb(renderTexture: ?*const sfRenderTexture) sfBool;
pub extern fn sfRenderTexture_setActive(renderTexture: ?*sfRenderTexture, active: sfBool) sfBool;
pub extern fn sfRenderTexture_display(renderTexture: ?*sfRenderTexture) void;
pub extern fn sfRenderTexture_clear(renderTexture: ?*sfRenderTexture, color: sfColor) void;
pub extern fn sfRenderTexture_setView(renderTexture: ?*sfRenderTexture, view: ?*const sfView) void;
pub extern fn sfRenderTexture_getView(renderTexture: ?*const sfRenderTexture) ?*const sfView;
pub extern fn sfRenderTexture_getDefaultView(renderTexture: ?*const sfRenderTexture) ?*const sfView;
pub extern fn sfRenderTexture_getViewport(renderTexture: ?*const sfRenderTexture, view: ?*const sfView) sfIntRect;
pub extern fn sfRenderTexture_mapPixelToCoords(renderTexture: ?*const sfRenderTexture, point: sfVector2i, view: ?*const sfView) sfVector2f;
pub extern fn sfRenderTexture_mapCoordsToPixel(renderTexture: ?*const sfRenderTexture, point: sfVector2f, view: ?*const sfView) sfVector2i;
pub extern fn sfRenderTexture_drawSprite(renderTexture: ?*sfRenderTexture, object: ?*const sfSprite, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawText(renderTexture: ?*sfRenderTexture, object: ?*const sfText, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawShape(renderTexture: ?*sfRenderTexture, object: ?*const sfShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawCircleShape(renderTexture: ?*sfRenderTexture, object: ?*const sfCircleShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawConvexShape(renderTexture: ?*sfRenderTexture, object: ?*const sfConvexShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawRectangleShape(renderTexture: ?*sfRenderTexture, object: ?*const sfRectangleShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawVertexArray(renderTexture: ?*sfRenderTexture, object: ?*const sfVertexArray, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawVertexBuffer(renderTexture: ?*sfRenderTexture, object: ?*const sfVertexBuffer, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawVertexBufferRange(renderTexture: ?*sfRenderTexture, object: ?*const sfVertexBuffer, firstVertex: usize, vertexCount: usize, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_drawPrimitives(renderTexture: ?*sfRenderTexture, vertices: [*c]const sfVertex, vertexCount: usize, @"type": sfPrimitiveType, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderTexture_pushGLStates(renderTexture: ?*sfRenderTexture) void;
pub extern fn sfRenderTexture_popGLStates(renderTexture: ?*sfRenderTexture) void;
pub extern fn sfRenderTexture_resetGLStates(renderTexture: ?*sfRenderTexture) void;
pub extern fn sfRenderTexture_getTexture(renderTexture: ?*const sfRenderTexture) ?*const sfTexture;
pub extern fn sfRenderTexture_getMaximumAntialiasingLevel() c_uint;
pub extern fn sfRenderTexture_setSmooth(renderTexture: ?*sfRenderTexture, smooth: sfBool) void;
pub extern fn sfRenderTexture_isSmooth(renderTexture: ?*const sfRenderTexture) sfBool;
pub extern fn sfRenderTexture_setRepeated(renderTexture: ?*sfRenderTexture, repeated: sfBool) void;
pub extern fn sfRenderTexture_isRepeated(renderTexture: ?*const sfRenderTexture) sfBool;
pub extern fn sfRenderTexture_generateMipmap(renderTexture: ?*sfRenderTexture) sfBool;
pub extern fn sfRenderWindow_create(mode: sfVideoMode, title: [*c]const u8, style: sfUint32, settings: [*c]const sfContextSettings) ?*sfRenderWindow;
pub extern fn sfRenderWindow_createUnicode(mode: sfVideoMode, title: [*c]const sfUint32, style: sfUint32, settings: [*c]const sfContextSettings) ?*sfRenderWindow;
pub extern fn sfRenderWindow_createFromHandle(handle: sfWindowHandle, settings: [*c]const sfContextSettings) ?*sfRenderWindow;
pub extern fn sfRenderWindow_destroy(renderWindow: ?*sfRenderWindow) void;
pub extern fn sfRenderWindow_close(renderWindow: ?*sfRenderWindow) void;
pub extern fn sfRenderWindow_isOpen(renderWindow: ?*const sfRenderWindow) sfBool;
pub extern fn sfRenderWindow_getSettings(renderWindow: ?*const sfRenderWindow) sfContextSettings;
pub extern fn sfRenderWindow_pollEvent(renderWindow: ?*sfRenderWindow, event: [*c]sfEvent) sfBool;
pub extern fn sfRenderWindow_waitEvent(renderWindow: ?*sfRenderWindow, event: [*c]sfEvent) sfBool;
pub extern fn sfRenderWindow_getPosition(renderWindow: ?*const sfRenderWindow) sfVector2i;
pub extern fn sfRenderWindow_setPosition(renderWindow: ?*sfRenderWindow, position: sfVector2i) void;
pub extern fn sfRenderWindow_getSize(renderWindow: ?*const sfRenderWindow) sfVector2u;
pub extern fn sfRenderWindow_isSrgb(renderWindow: ?*const sfRenderWindow) sfBool;
pub extern fn sfRenderWindow_setSize(renderWindow: ?*sfRenderWindow, size: sfVector2u) void;
pub extern fn sfRenderWindow_setTitle(renderWindow: ?*sfRenderWindow, title: [*c]const u8) void;
pub extern fn sfRenderWindow_setUnicodeTitle(renderWindow: ?*sfRenderWindow, title: [*c]const sfUint32) void;
pub extern fn sfRenderWindow_setIcon(renderWindow: ?*sfRenderWindow, width: c_uint, height: c_uint, pixels: [*c]const sfUint8) void;
pub extern fn sfRenderWindow_setVisible(renderWindow: ?*sfRenderWindow, visible: sfBool) void;
pub extern fn sfRenderWindow_setVerticalSyncEnabled(renderWindow: ?*sfRenderWindow, enabled: sfBool) void;
pub extern fn sfRenderWindow_setMouseCursorVisible(renderWindow: ?*sfRenderWindow, show: sfBool) void;
pub extern fn sfRenderWindow_setMouseCursorGrabbed(renderWindow: ?*sfRenderWindow, grabbed: sfBool) void;
pub extern fn sfRenderWindow_setMouseCursor(window: ?*sfRenderWindow, cursor: ?*const sfCursor) void;
pub extern fn sfRenderWindow_setKeyRepeatEnabled(renderWindow: ?*sfRenderWindow, enabled: sfBool) void;
pub extern fn sfRenderWindow_setFramerateLimit(renderWindow: ?*sfRenderWindow, limit: c_uint) void;
pub extern fn sfRenderWindow_setJoystickThreshold(renderWindow: ?*sfRenderWindow, threshold: f32) void;
pub extern fn sfRenderWindow_setActive(renderWindow: ?*sfRenderWindow, active: sfBool) sfBool;
pub extern fn sfRenderWindow_requestFocus(renderWindow: ?*sfRenderWindow) void;
pub extern fn sfRenderWindow_hasFocus(renderWindow: ?*const sfRenderWindow) sfBool;
pub extern fn sfRenderWindow_display(renderWindow: ?*sfRenderWindow) void;
pub extern fn sfRenderWindow_getSystemHandle(renderWindow: ?*const sfRenderWindow) sfWindowHandle;
pub extern fn sfRenderWindow_clear(renderWindow: ?*sfRenderWindow, color: sfColor) void;
pub extern fn sfRenderWindow_setView(renderWindow: ?*sfRenderWindow, view: ?*const sfView) void;
pub extern fn sfRenderWindow_getView(renderWindow: ?*const sfRenderWindow) ?*const sfView;
pub extern fn sfRenderWindow_getDefaultView(renderWindow: ?*const sfRenderWindow) ?*const sfView;
pub extern fn sfRenderWindow_getViewport(renderWindow: ?*const sfRenderWindow, view: ?*const sfView) sfIntRect;
pub extern fn sfRenderWindow_mapPixelToCoords(renderWindow: ?*const sfRenderWindow, point: sfVector2i, view: ?*const sfView) sfVector2f;
pub extern fn sfRenderWindow_mapCoordsToPixel(renderWindow: ?*const sfRenderWindow, point: sfVector2f, view: ?*const sfView) sfVector2i;
pub extern fn sfRenderWindow_drawSprite(renderWindow: ?*sfRenderWindow, object: ?*const sfSprite, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawText(renderWindow: ?*sfRenderWindow, object: ?*const sfText, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawShape(renderWindow: ?*sfRenderWindow, object: ?*const sfShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawCircleShape(renderWindow: ?*sfRenderWindow, object: ?*const sfCircleShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawConvexShape(renderWindow: ?*sfRenderWindow, object: ?*const sfConvexShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawRectangleShape(renderWindow: ?*sfRenderWindow, object: ?*const sfRectangleShape, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawVertexArray(renderWindow: ?*sfRenderWindow, object: ?*const sfVertexArray, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawVertexBuffer(renderWindow: ?*sfRenderWindow, object: ?*const sfVertexBuffer, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawVertexBufferRange(renderWindow: ?*sfRenderWindow, object: ?*const sfVertexBuffer, firstVertex: usize, vertexCount: usize, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_drawPrimitives(renderWindow: ?*sfRenderWindow, vertices: [*c]const sfVertex, vertexCount: usize, @"type": sfPrimitiveType, states: [*c]const sfRenderStates) void;
pub extern fn sfRenderWindow_pushGLStates(renderWindow: ?*sfRenderWindow) void;
pub extern fn sfRenderWindow_popGLStates(renderWindow: ?*sfRenderWindow) void;
pub extern fn sfRenderWindow_resetGLStates(renderWindow: ?*sfRenderWindow) void;
pub extern fn sfRenderWindow_capture(renderWindow: ?*const sfRenderWindow) ?*sfImage;
pub extern fn sfMouse_getPositionRenderWindow(relativeTo: ?*const sfRenderWindow) sfVector2i;
pub extern fn sfMouse_setPositionRenderWindow(position: sfVector2i, relativeTo: ?*const sfRenderWindow) void;
pub extern fn sfTouch_getPositionRenderWindow(finger: c_uint, relativeTo: ?*const sfRenderWindow) sfVector2i;
pub extern fn sfRenderWindow_createVulkanSurface(renderWindow: ?*sfRenderWindow, instance: [*c]const VkInstance, surface: [*c]VkSurfaceKHR, allocator: ?*const VkAllocationCallbacks) sfBool;
pub const sfGlslVec2 = sfVector2f;
pub const sfGlslIvec2 = sfVector2i;
pub const sfGlslBvec2 = extern struct {
    x: sfBool = @import("std").mem.zeroes(sfBool),
    y: sfBool = @import("std").mem.zeroes(sfBool),
};
pub const sfGlslVec3 = sfVector3f;
pub const sfGlslIvec3 = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    z: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfGlslBvec3 = extern struct {
    x: sfBool = @import("std").mem.zeroes(sfBool),
    y: sfBool = @import("std").mem.zeroes(sfBool),
    z: sfBool = @import("std").mem.zeroes(sfBool),
};
pub const sfGlslVec4 = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
    w: f32 = @import("std").mem.zeroes(f32),
};
pub const sfGlslIvec4 = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    z: c_int = @import("std").mem.zeroes(c_int),
    w: c_int = @import("std").mem.zeroes(c_int),
};
pub const sfGlslBvec4 = extern struct {
    x: sfBool = @import("std").mem.zeroes(sfBool),
    y: sfBool = @import("std").mem.zeroes(sfBool),
    z: sfBool = @import("std").mem.zeroes(sfBool),
    w: sfBool = @import("std").mem.zeroes(sfBool),
};
pub const sfGlslMat3 = extern struct {
    array: [9]f32 = @import("std").mem.zeroes([9]f32),
};
pub const sfGlslMat4 = extern struct {
    array: [16]f32 = @import("std").mem.zeroes([16]f32),
};
pub extern fn sfShader_createFromFile(vertexShaderFilename: [*c]const u8, geometryShaderFilename: [*c]const u8, fragmentShaderFilename: [*c]const u8) ?*sfShader;
pub extern fn sfShader_createFromMemory(vertexShader: [*c]const u8, geometryShader: [*c]const u8, fragmentShader: [*c]const u8) ?*sfShader;
pub extern fn sfShader_createFromStream(vertexShaderStream: [*c]sfInputStream, geometryShaderStream: [*c]sfInputStream, fragmentShaderStream: [*c]sfInputStream) ?*sfShader;
pub extern fn sfShader_destroy(shader: ?*sfShader) void;
pub extern fn sfShader_setFloatUniform(shader: ?*sfShader, name: [*c]const u8, x: f32) void;
pub extern fn sfShader_setVec2Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslVec2) void;
pub extern fn sfShader_setVec3Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslVec3) void;
pub extern fn sfShader_setVec4Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslVec4) void;
pub extern fn sfShader_setColorUniform(shader: ?*sfShader, name: [*c]const u8, color: sfColor) void;
pub extern fn sfShader_setIntUniform(shader: ?*sfShader, name: [*c]const u8, x: c_int) void;
pub extern fn sfShader_setIvec2Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslIvec2) void;
pub extern fn sfShader_setIvec3Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslIvec3) void;
pub extern fn sfShader_setIvec4Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslIvec4) void;
pub extern fn sfShader_setIntColorUniform(shader: ?*sfShader, name: [*c]const u8, color: sfColor) void;
pub extern fn sfShader_setBoolUniform(shader: ?*sfShader, name: [*c]const u8, x: sfBool) void;
pub extern fn sfShader_setBvec2Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslBvec2) void;
pub extern fn sfShader_setBvec3Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslBvec3) void;
pub extern fn sfShader_setBvec4Uniform(shader: ?*sfShader, name: [*c]const u8, vector: sfGlslBvec4) void;
pub extern fn sfShader_setMat3Uniform(shader: ?*sfShader, name: [*c]const u8, matrix: [*c]const sfGlslMat3) void;
pub extern fn sfShader_setMat4Uniform(shader: ?*sfShader, name: [*c]const u8, matrix: [*c]const sfGlslMat4) void;
pub extern fn sfShader_setTextureUniform(shader: ?*sfShader, name: [*c]const u8, texture: ?*const sfTexture) void;
pub extern fn sfShader_setCurrentTextureUniform(shader: ?*sfShader, name: [*c]const u8) void;
pub extern fn sfShader_setFloatUniformArray(shader: ?*sfShader, name: [*c]const u8, scalarArray: [*c]const f32, length: usize) void;
pub extern fn sfShader_setVec2UniformArray(shader: ?*sfShader, name: [*c]const u8, vectorArray: [*c]const sfGlslVec2, length: usize) void;
pub extern fn sfShader_setVec3UniformArray(shader: ?*sfShader, name: [*c]const u8, vectorArray: [*c]const sfGlslVec3, length: usize) void;
pub extern fn sfShader_setVec4UniformArray(shader: ?*sfShader, name: [*c]const u8, vectorArray: [*c]const sfGlslVec4, length: usize) void;
pub extern fn sfShader_setMat3UniformArray(shader: ?*sfShader, name: [*c]const u8, matrixArray: [*c]const sfGlslMat3, length: usize) void;
pub extern fn sfShader_setMat4UniformArray(shader: ?*sfShader, name: [*c]const u8, matrixArray: [*c]const sfGlslMat4, length: usize) void;
pub extern fn sfShader_setFloatParameter(shader: ?*sfShader, name: [*c]const u8, x: f32) void;
pub extern fn sfShader_setFloat2Parameter(shader: ?*sfShader, name: [*c]const u8, x: f32, y: f32) void;
pub extern fn sfShader_setFloat3Parameter(shader: ?*sfShader, name: [*c]const u8, x: f32, y: f32, z: f32) void;
pub extern fn sfShader_setFloat4Parameter(shader: ?*sfShader, name: [*c]const u8, x: f32, y: f32, z: f32, w: f32) void;
pub extern fn sfShader_setVector2Parameter(shader: ?*sfShader, name: [*c]const u8, vector: sfVector2f) void;
pub extern fn sfShader_setVector3Parameter(shader: ?*sfShader, name: [*c]const u8, vector: sfVector3f) void;
pub extern fn sfShader_setColorParameter(shader: ?*sfShader, name: [*c]const u8, color: sfColor) void;
pub extern fn sfShader_setTransformParameter(shader: ?*sfShader, name: [*c]const u8, transform: sfTransform) void;
pub extern fn sfShader_setTextureParameter(shader: ?*sfShader, name: [*c]const u8, texture: ?*const sfTexture) void;
pub extern fn sfShader_setCurrentTextureParameter(shader: ?*sfShader, name: [*c]const u8) void;
pub extern fn sfShader_getNativeHandle(shader: ?*const sfShader) c_uint;
pub extern fn sfShader_bind(shader: ?*const sfShader) void;
pub extern fn sfShader_isAvailable() sfBool;
pub extern fn sfShader_isGeometryAvailable() sfBool;
pub const sfShapeGetPointCountCallback = ?*const fn (?*anyopaque) callconv(.C) usize;
pub const sfShapeGetPointCallback = ?*const fn (usize, ?*anyopaque) callconv(.C) sfVector2f;
pub extern fn sfShape_create(getPointCount: sfShapeGetPointCountCallback, getPoint: sfShapeGetPointCallback, userData: ?*anyopaque) ?*sfShape;
pub extern fn sfShape_destroy(shape: ?*sfShape) void;
pub extern fn sfShape_setPosition(shape: ?*sfShape, position: sfVector2f) void;
pub extern fn sfShape_setRotation(shape: ?*sfShape, angle: f32) void;
pub extern fn sfShape_setScale(shape: ?*sfShape, scale: sfVector2f) void;
pub extern fn sfShape_setOrigin(shape: ?*sfShape, origin: sfVector2f) void;
pub extern fn sfShape_getPosition(shape: ?*const sfShape) sfVector2f;
pub extern fn sfShape_getRotation(shape: ?*const sfShape) f32;
pub extern fn sfShape_getScale(shape: ?*const sfShape) sfVector2f;
pub extern fn sfShape_getOrigin(shape: ?*const sfShape) sfVector2f;
pub extern fn sfShape_move(shape: ?*sfShape, offset: sfVector2f) void;
pub extern fn sfShape_rotate(shape: ?*sfShape, angle: f32) void;
pub extern fn sfShape_scale(shape: ?*sfShape, factors: sfVector2f) void;
pub extern fn sfShape_getTransform(shape: ?*const sfShape) sfTransform;
pub extern fn sfShape_getInverseTransform(shape: ?*const sfShape) sfTransform;
pub extern fn sfShape_setTexture(shape: ?*sfShape, texture: ?*const sfTexture, resetRect: sfBool) void;
pub extern fn sfShape_setTextureRect(shape: ?*sfShape, rect: sfIntRect) void;
pub extern fn sfShape_setFillColor(shape: ?*sfShape, color: sfColor) void;
pub extern fn sfShape_setOutlineColor(shape: ?*sfShape, color: sfColor) void;
pub extern fn sfShape_setOutlineThickness(shape: ?*sfShape, thickness: f32) void;
pub extern fn sfShape_getTexture(shape: ?*const sfShape) ?*const sfTexture;
pub extern fn sfShape_getTextureRect(shape: ?*const sfShape) sfIntRect;
pub extern fn sfShape_getFillColor(shape: ?*const sfShape) sfColor;
pub extern fn sfShape_getOutlineColor(shape: ?*const sfShape) sfColor;
pub extern fn sfShape_getOutlineThickness(shape: ?*const sfShape) f32;
pub extern fn sfShape_getPointCount(shape: ?*const sfShape) usize;
pub extern fn sfShape_getPoint(shape: ?*const sfShape, index: usize) sfVector2f;
pub extern fn sfShape_getLocalBounds(shape: ?*const sfShape) sfFloatRect;
pub extern fn sfShape_getGlobalBounds(shape: ?*const sfShape) sfFloatRect;
pub extern fn sfShape_update(shape: ?*sfShape) void;
pub extern fn sfSprite_create() ?*sfSprite;
pub extern fn sfSprite_copy(sprite: ?*const sfSprite) ?*sfSprite;
pub extern fn sfSprite_destroy(sprite: ?*sfSprite) void;
pub extern fn sfSprite_setPosition(sprite: ?*sfSprite, position: sfVector2f) void;
pub extern fn sfSprite_setRotation(sprite: ?*sfSprite, angle: f32) void;
pub extern fn sfSprite_setScale(sprite: ?*sfSprite, scale: sfVector2f) void;
pub extern fn sfSprite_setOrigin(sprite: ?*sfSprite, origin: sfVector2f) void;
pub extern fn sfSprite_getPosition(sprite: ?*const sfSprite) sfVector2f;
pub extern fn sfSprite_getRotation(sprite: ?*const sfSprite) f32;
pub extern fn sfSprite_getScale(sprite: ?*const sfSprite) sfVector2f;
pub extern fn sfSprite_getOrigin(sprite: ?*const sfSprite) sfVector2f;
pub extern fn sfSprite_move(sprite: ?*sfSprite, offset: sfVector2f) void;
pub extern fn sfSprite_rotate(sprite: ?*sfSprite, angle: f32) void;
pub extern fn sfSprite_scale(sprite: ?*sfSprite, factors: sfVector2f) void;
pub extern fn sfSprite_getTransform(sprite: ?*const sfSprite) sfTransform;
pub extern fn sfSprite_getInverseTransform(sprite: ?*const sfSprite) sfTransform;
pub extern fn sfSprite_setTexture(sprite: ?*sfSprite, texture: ?*const sfTexture, resetRect: sfBool) void;
pub extern fn sfSprite_setTextureRect(sprite: ?*sfSprite, rectangle: sfIntRect) void;
pub extern fn sfSprite_setColor(sprite: ?*sfSprite, color: sfColor) void;
pub extern fn sfSprite_getTexture(sprite: ?*const sfSprite) ?*const sfTexture;
pub extern fn sfSprite_getTextureRect(sprite: ?*const sfSprite) sfIntRect;
pub extern fn sfSprite_getColor(sprite: ?*const sfSprite) sfColor;
pub extern fn sfSprite_getLocalBounds(sprite: ?*const sfSprite) sfFloatRect;
pub extern fn sfSprite_getGlobalBounds(sprite: ?*const sfSprite) sfFloatRect;
pub const sfTextRegular: c_int = 0;
pub const sfTextBold: c_int = 1;
pub const sfTextItalic: c_int = 2;
pub const sfTextUnderlined: c_int = 4;
pub const sfTextStrikeThrough: c_int = 8;
pub const sfTextStyle = c_uint;
pub extern fn sfText_create() ?*sfText;
pub extern fn sfText_copy(text: ?*const sfText) ?*sfText;
pub extern fn sfText_destroy(text: ?*sfText) void;
pub extern fn sfText_setPosition(text: ?*sfText, position: sfVector2f) void;
pub extern fn sfText_setRotation(text: ?*sfText, angle: f32) void;
pub extern fn sfText_setScale(text: ?*sfText, scale: sfVector2f) void;
pub extern fn sfText_setOrigin(text: ?*sfText, origin: sfVector2f) void;
pub extern fn sfText_getPosition(text: ?*const sfText) sfVector2f;
pub extern fn sfText_getRotation(text: ?*const sfText) f32;
pub extern fn sfText_getScale(text: ?*const sfText) sfVector2f;
pub extern fn sfText_getOrigin(text: ?*const sfText) sfVector2f;
pub extern fn sfText_move(text: ?*sfText, offset: sfVector2f) void;
pub extern fn sfText_rotate(text: ?*sfText, angle: f32) void;
pub extern fn sfText_scale(text: ?*sfText, factors: sfVector2f) void;
pub extern fn sfText_getTransform(text: ?*const sfText) sfTransform;
pub extern fn sfText_getInverseTransform(text: ?*const sfText) sfTransform;
pub extern fn sfText_setString(text: ?*sfText, string: [*c]const u8) void;
pub extern fn sfText_setUnicodeString(text: ?*sfText, string: [*c]const sfUint32) void;
pub extern fn sfText_setFont(text: ?*sfText, font: ?*const sfFont) void;
pub extern fn sfText_setCharacterSize(text: ?*sfText, size: c_uint) void;
pub extern fn sfText_setLineSpacing(text: ?*sfText, spacingFactor: f32) void;
pub extern fn sfText_setLetterSpacing(text: ?*sfText, spacingFactor: f32) void;
pub extern fn sfText_setStyle(text: ?*sfText, style: sfUint32) void;
pub extern fn sfText_setColor(text: ?*sfText, color: sfColor) void;
pub extern fn sfText_setFillColor(text: ?*sfText, color: sfColor) void;
pub extern fn sfText_setOutlineColor(text: ?*sfText, color: sfColor) void;
pub extern fn sfText_setOutlineThickness(text: ?*sfText, thickness: f32) void;
pub extern fn sfText_getString(text: ?*const sfText) [*c]const u8;
pub extern fn sfText_getUnicodeString(text: ?*const sfText) [*c]const sfUint32;
pub extern fn sfText_getFont(text: ?*const sfText) ?*const sfFont;
pub extern fn sfText_getCharacterSize(text: ?*const sfText) c_uint;
pub extern fn sfText_getLetterSpacing(text: ?*const sfText) f32;
pub extern fn sfText_getLineSpacing(text: ?*const sfText) f32;
pub extern fn sfText_getStyle(text: ?*const sfText) sfUint32;
pub extern fn sfText_getColor(text: ?*const sfText) sfColor;
pub extern fn sfText_getFillColor(text: ?*const sfText) sfColor;
pub extern fn sfText_getOutlineColor(text: ?*const sfText) sfColor;
pub extern fn sfText_getOutlineThickness(text: ?*const sfText) f32;
pub extern fn sfText_findCharacterPos(text: ?*const sfText, index: usize) sfVector2f;
pub extern fn sfText_getLocalBounds(text: ?*const sfText) sfFloatRect;
pub extern fn sfText_getGlobalBounds(text: ?*const sfText) sfFloatRect;
pub const sfTextureNormalized: c_int = 0;
pub const sfTexturePixels: c_int = 1;
pub const sfTextureCoordinateType = c_uint;
pub extern fn sfTexture_create(width: c_uint, height: c_uint) ?*sfTexture;
pub extern fn sfTexture_createFromFile(filename: [*c]const u8, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_createSrgbFromFile(filename: [*c]const u8, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_createFromMemory(data: ?*const anyopaque, sizeInBytes: usize, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_createSrgbFromMemory(data: ?*const anyopaque, sizeInBytes: usize, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_createFromStream(stream: [*c]sfInputStream, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_createSrgbFromStream(stream: [*c]sfInputStream, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_createFromImage(image: ?*const sfImage, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_createSrgbFromImage(image: ?*const sfImage, area: [*c]const sfIntRect) ?*sfTexture;
pub extern fn sfTexture_copy(texture: ?*const sfTexture) ?*sfTexture;
pub extern fn sfTexture_destroy(texture: ?*sfTexture) void;
pub extern fn sfTexture_getSize(texture: ?*const sfTexture) sfVector2u;
pub extern fn sfTexture_copyToImage(texture: ?*const sfTexture) ?*sfImage;
pub extern fn sfTexture_updateFromPixels(texture: ?*sfTexture, pixels: [*c]const sfUint8, width: c_uint, height: c_uint, x: c_uint, y: c_uint) void;
pub extern fn sfTexture_updateFromTexture(destination: ?*sfTexture, source: ?*const sfTexture, x: c_uint, y: c_uint) void;
pub extern fn sfTexture_updateFromImage(texture: ?*sfTexture, image: ?*const sfImage, x: c_uint, y: c_uint) void;
pub extern fn sfTexture_updateFromWindow(texture: ?*sfTexture, window: ?*const sfWindow, x: c_uint, y: c_uint) void;
pub extern fn sfTexture_updateFromRenderWindow(texture: ?*sfTexture, renderWindow: ?*const sfRenderWindow, x: c_uint, y: c_uint) void;
pub extern fn sfTexture_setSmooth(texture: ?*sfTexture, smooth: sfBool) void;
pub extern fn sfTexture_isSmooth(texture: ?*const sfTexture) sfBool;
pub extern fn sfTexture_isSrgb(texture: ?*const sfTexture) sfBool;
pub extern fn sfTexture_setRepeated(texture: ?*sfTexture, repeated: sfBool) void;
pub extern fn sfTexture_isRepeated(texture: ?*const sfTexture) sfBool;
pub extern fn sfTexture_generateMipmap(texture: ?*sfTexture) sfBool;
pub extern fn sfTexture_swap(left: ?*sfTexture, right: ?*sfTexture) void;
pub extern fn sfTexture_getNativeHandle(texture: ?*const sfTexture) c_uint;
pub extern fn sfTexture_bind(texture: ?*const sfTexture, @"type": sfTextureCoordinateType) void;
pub extern fn sfTexture_getMaximumSize() c_uint;
pub extern fn sfTransformable_create() ?*sfTransformable;
pub extern fn sfTransformable_copy(transformable: ?*const sfTransformable) ?*sfTransformable;
pub extern fn sfTransformable_destroy(transformable: ?*sfTransformable) void;
pub extern fn sfTransformable_setPosition(transformable: ?*sfTransformable, position: sfVector2f) void;
pub extern fn sfTransformable_setRotation(transformable: ?*sfTransformable, angle: f32) void;
pub extern fn sfTransformable_setScale(transformable: ?*sfTransformable, scale: sfVector2f) void;
pub extern fn sfTransformable_setOrigin(transformable: ?*sfTransformable, origin: sfVector2f) void;
pub extern fn sfTransformable_getPosition(transformable: ?*const sfTransformable) sfVector2f;
pub extern fn sfTransformable_getRotation(transformable: ?*const sfTransformable) f32;
pub extern fn sfTransformable_getScale(transformable: ?*const sfTransformable) sfVector2f;
pub extern fn sfTransformable_getOrigin(transformable: ?*const sfTransformable) sfVector2f;
pub extern fn sfTransformable_move(transformable: ?*sfTransformable, offset: sfVector2f) void;
pub extern fn sfTransformable_rotate(transformable: ?*sfTransformable, angle: f32) void;
pub extern fn sfTransformable_scale(transformable: ?*sfTransformable, factors: sfVector2f) void;
pub extern fn sfTransformable_getTransform(transformable: ?*const sfTransformable) sfTransform;
pub extern fn sfTransformable_getInverseTransform(transformable: ?*const sfTransformable) sfTransform;
pub extern fn sfVertexArray_create() ?*sfVertexArray;
pub extern fn sfVertexArray_copy(vertexArray: ?*const sfVertexArray) ?*sfVertexArray;
pub extern fn sfVertexArray_destroy(vertexArray: ?*sfVertexArray) void;
pub extern fn sfVertexArray_getVertexCount(vertexArray: ?*const sfVertexArray) usize;
pub extern fn sfVertexArray_getVertex(vertexArray: ?*sfVertexArray, index: usize) [*c]sfVertex;
pub extern fn sfVertexArray_clear(vertexArray: ?*sfVertexArray) void;
pub extern fn sfVertexArray_resize(vertexArray: ?*sfVertexArray, vertexCount: usize) void;
pub extern fn sfVertexArray_append(vertexArray: ?*sfVertexArray, vertex: sfVertex) void;
pub extern fn sfVertexArray_setPrimitiveType(vertexArray: ?*sfVertexArray, @"type": sfPrimitiveType) void;
pub extern fn sfVertexArray_getPrimitiveType(vertexArray: ?*sfVertexArray) sfPrimitiveType;
pub extern fn sfVertexArray_getBounds(vertexArray: ?*sfVertexArray) sfFloatRect;
pub const sfVertexBufferStream: c_int = 0;
pub const sfVertexBufferDynamic: c_int = 1;
pub const sfVertexBufferStatic: c_int = 2;
pub const sfVertexBufferUsage = c_uint;
pub extern fn sfVertexBuffer_create(vertexCount: c_uint, @"type": sfPrimitiveType, usage: sfVertexBufferUsage) ?*sfVertexBuffer;
pub extern fn sfVertexBuffer_copy(vertexBuffer: ?*const sfVertexBuffer) ?*sfVertexBuffer;
pub extern fn sfVertexBuffer_destroy(vertexBuffer: ?*sfVertexBuffer) void;
pub extern fn sfVertexBuffer_getVertexCount(vertexBuffer: ?*const sfVertexBuffer) c_uint;
pub extern fn sfVertexBuffer_update(vertexBuffer: ?*sfVertexBuffer, vertices: [*c]const sfVertex, vertexCount: c_uint, offset: c_uint) sfBool;
pub extern fn sfVertexBuffer_updateFromVertexBuffer(vertexBuffer: ?*sfVertexBuffer, other: ?*const sfVertexBuffer) sfBool;
pub extern fn sfVertexBuffer_swap(left: ?*sfVertexBuffer, right: ?*sfVertexBuffer) void;
pub extern fn sfVertexBuffer_getNativeHandle(vertexBuffer: ?*sfVertexBuffer) c_uint;
pub extern fn sfVertexBuffer_setPrimitiveType(vertexBuffer: ?*sfVertexBuffer, @"type": sfPrimitiveType) void;
pub extern fn sfVertexBuffer_getPrimitiveType(vertexBuffer: ?*const sfVertexBuffer) sfPrimitiveType;
pub extern fn sfVertexBuffer_setUsage(vertexBuffer: ?*sfVertexBuffer, usage: sfVertexBufferUsage) void;
pub extern fn sfVertexBuffer_getUsage(vertexBuffer: ?*const sfVertexBuffer) sfVertexBufferUsage;
pub extern fn sfVertexBuffer_bind(vertexBuffer: ?*const sfVertexBuffer) void;
pub extern fn sfVertexBuffer_isAvailable() sfBool;
pub extern fn sfView_create() ?*sfView;
pub extern fn sfView_createFromRect(rectangle: sfFloatRect) ?*sfView;
pub extern fn sfView_copy(view: ?*const sfView) ?*sfView;
pub extern fn sfView_destroy(view: ?*sfView) void;
pub extern fn sfView_setCenter(view: ?*sfView, center: sfVector2f) void;
pub extern fn sfView_setSize(view: ?*sfView, size: sfVector2f) void;
pub extern fn sfView_setRotation(view: ?*sfView, angle: f32) void;
pub extern fn sfView_setViewport(view: ?*sfView, viewport: sfFloatRect) void;
pub extern fn sfView_reset(view: ?*sfView, rectangle: sfFloatRect) void;
pub extern fn sfView_getCenter(view: ?*const sfView) sfVector2f;
pub extern fn sfView_getSize(view: ?*const sfView) sfVector2f;
pub extern fn sfView_getRotation(view: ?*const sfView) f32;
pub extern fn sfView_getViewport(view: ?*const sfView) sfFloatRect;
pub extern fn sfView_move(view: ?*sfView, offset: sfVector2f) void;
pub extern fn sfView_rotate(view: ?*sfView, angle: f32) void;
pub extern fn sfView_zoom(view: ?*sfView, factor: f32) void;
pub extern fn sfListener_setGlobalVolume(volume: f32) void;
pub extern fn sfListener_getGlobalVolume() f32;
pub extern fn sfListener_setPosition(position: sfVector3f) void;
pub extern fn sfListener_getPosition() sfVector3f;
pub extern fn sfListener_setDirection(direction: sfVector3f) void;
pub extern fn sfListener_getDirection() sfVector3f;
pub extern fn sfListener_setUpVector(upVector: sfVector3f) void;
pub extern fn sfListener_getUpVector() sfVector3f;
pub const sfStopped: c_int = 0;
pub const sfPaused: c_int = 1;
pub const sfPlaying: c_int = 2;
pub const sfSoundStatus = c_uint;
pub const struct_sfMusic = opaque {};
pub const sfMusic = struct_sfMusic;
pub const struct_sfSound = opaque {};
pub const sfSound = struct_sfSound;
pub const struct_sfSoundBuffer = opaque {};
pub const sfSoundBuffer = struct_sfSoundBuffer;
pub const struct_sfSoundBufferRecorder = opaque {};
pub const sfSoundBufferRecorder = struct_sfSoundBufferRecorder;
pub const struct_sfSoundRecorder = opaque {};
pub const sfSoundRecorder = struct_sfSoundRecorder;
pub const struct_sfSoundStream = opaque {};
pub const sfSoundStream = struct_sfSoundStream;
pub const sfTimeSpan = extern struct {
    offset: sfTime = @import("std").mem.zeroes(sfTime),
    length: sfTime = @import("std").mem.zeroes(sfTime),
};
pub extern fn sfMusic_createFromFile(filename: [*c]const u8) ?*sfMusic;
pub extern fn sfMusic_createFromMemory(data: ?*const anyopaque, sizeInBytes: usize) ?*sfMusic;
pub extern fn sfMusic_createFromStream(stream: [*c]sfInputStream) ?*sfMusic;
pub extern fn sfMusic_destroy(music: ?*sfMusic) void;
pub extern fn sfMusic_setLoop(music: ?*sfMusic, loop: sfBool) void;
pub extern fn sfMusic_getLoop(music: ?*const sfMusic) sfBool;
pub extern fn sfMusic_getDuration(music: ?*const sfMusic) sfTime;
pub extern fn sfMusic_getLoopPoints(music: ?*const sfMusic) sfTimeSpan;
pub extern fn sfMusic_setLoopPoints(music: ?*sfMusic, timePoints: sfTimeSpan) void;
pub extern fn sfMusic_play(music: ?*sfMusic) void;
pub extern fn sfMusic_pause(music: ?*sfMusic) void;
pub extern fn sfMusic_stop(music: ?*sfMusic) void;
pub extern fn sfMusic_getChannelCount(music: ?*const sfMusic) c_uint;
pub extern fn sfMusic_getSampleRate(music: ?*const sfMusic) c_uint;
pub extern fn sfMusic_getStatus(music: ?*const sfMusic) sfSoundStatus;
pub extern fn sfMusic_getPlayingOffset(music: ?*const sfMusic) sfTime;
pub extern fn sfMusic_setPitch(music: ?*sfMusic, pitch: f32) void;
pub extern fn sfMusic_setVolume(music: ?*sfMusic, volume: f32) void;
pub extern fn sfMusic_setPosition(music: ?*sfMusic, position: sfVector3f) void;
pub extern fn sfMusic_setRelativeToListener(music: ?*sfMusic, relative: sfBool) void;
pub extern fn sfMusic_setMinDistance(music: ?*sfMusic, distance: f32) void;
pub extern fn sfMusic_setAttenuation(music: ?*sfMusic, attenuation: f32) void;
pub extern fn sfMusic_setPlayingOffset(music: ?*sfMusic, timeOffset: sfTime) void;
pub extern fn sfMusic_getPitch(music: ?*const sfMusic) f32;
pub extern fn sfMusic_getVolume(music: ?*const sfMusic) f32;
pub extern fn sfMusic_getPosition(music: ?*const sfMusic) sfVector3f;
pub extern fn sfMusic_isRelativeToListener(music: ?*const sfMusic) sfBool;
pub extern fn sfMusic_getMinDistance(music: ?*const sfMusic) f32;
pub extern fn sfMusic_getAttenuation(music: ?*const sfMusic) f32;
pub extern fn sfSound_create() ?*sfSound;
pub extern fn sfSound_copy(sound: ?*const sfSound) ?*sfSound;
pub extern fn sfSound_destroy(sound: ?*sfSound) void;
pub extern fn sfSound_play(sound: ?*sfSound) void;
pub extern fn sfSound_pause(sound: ?*sfSound) void;
pub extern fn sfSound_stop(sound: ?*sfSound) void;
pub extern fn sfSound_setBuffer(sound: ?*sfSound, buffer: ?*const sfSoundBuffer) void;
pub extern fn sfSound_getBuffer(sound: ?*const sfSound) ?*const sfSoundBuffer;
pub extern fn sfSound_setLoop(sound: ?*sfSound, loop: sfBool) void;
pub extern fn sfSound_getLoop(sound: ?*const sfSound) sfBool;
pub extern fn sfSound_getStatus(sound: ?*const sfSound) sfSoundStatus;
pub extern fn sfSound_setPitch(sound: ?*sfSound, pitch: f32) void;
pub extern fn sfSound_setVolume(sound: ?*sfSound, volume: f32) void;
pub extern fn sfSound_setPosition(sound: ?*sfSound, position: sfVector3f) void;
pub extern fn sfSound_setRelativeToListener(sound: ?*sfSound, relative: sfBool) void;
pub extern fn sfSound_setMinDistance(sound: ?*sfSound, distance: f32) void;
pub extern fn sfSound_setAttenuation(sound: ?*sfSound, attenuation: f32) void;
pub extern fn sfSound_setPlayingOffset(sound: ?*sfSound, timeOffset: sfTime) void;
pub extern fn sfSound_getPitch(sound: ?*const sfSound) f32;
pub extern fn sfSound_getVolume(sound: ?*const sfSound) f32;
pub extern fn sfSound_getPosition(sound: ?*const sfSound) sfVector3f;
pub extern fn sfSound_isRelativeToListener(sound: ?*const sfSound) sfBool;
pub extern fn sfSound_getMinDistance(sound: ?*const sfSound) f32;
pub extern fn sfSound_getAttenuation(sound: ?*const sfSound) f32;
pub extern fn sfSound_getPlayingOffset(sound: ?*const sfSound) sfTime;
pub extern fn sfSoundBuffer_createFromFile(filename: [*c]const u8) ?*sfSoundBuffer;
pub extern fn sfSoundBuffer_createFromMemory(data: ?*const anyopaque, sizeInBytes: usize) ?*sfSoundBuffer;
pub extern fn sfSoundBuffer_createFromStream(stream: [*c]sfInputStream) ?*sfSoundBuffer;
pub extern fn sfSoundBuffer_createFromSamples(samples: [*c]const sfInt16, sampleCount: sfUint64, channelCount: c_uint, sampleRate: c_uint) ?*sfSoundBuffer;
pub extern fn sfSoundBuffer_copy(soundBuffer: ?*const sfSoundBuffer) ?*sfSoundBuffer;
pub extern fn sfSoundBuffer_destroy(soundBuffer: ?*sfSoundBuffer) void;
pub extern fn sfSoundBuffer_saveToFile(soundBuffer: ?*const sfSoundBuffer, filename: [*c]const u8) sfBool;
pub extern fn sfSoundBuffer_getSamples(soundBuffer: ?*const sfSoundBuffer) [*c]const sfInt16;
pub extern fn sfSoundBuffer_getSampleCount(soundBuffer: ?*const sfSoundBuffer) sfUint64;
pub extern fn sfSoundBuffer_getSampleRate(soundBuffer: ?*const sfSoundBuffer) c_uint;
pub extern fn sfSoundBuffer_getChannelCount(soundBuffer: ?*const sfSoundBuffer) c_uint;
pub extern fn sfSoundBuffer_getDuration(soundBuffer: ?*const sfSoundBuffer) sfTime;
pub extern fn sfSoundBufferRecorder_create() ?*sfSoundBufferRecorder;
pub extern fn sfSoundBufferRecorder_destroy(soundBufferRecorder: ?*sfSoundBufferRecorder) void;
pub extern fn sfSoundBufferRecorder_start(soundBufferRecorder: ?*sfSoundBufferRecorder, sampleRate: c_uint) sfBool;
pub extern fn sfSoundBufferRecorder_stop(soundBufferRecorder: ?*sfSoundBufferRecorder) void;
pub extern fn sfSoundBufferRecorder_getSampleRate(soundBufferRecorder: ?*const sfSoundBufferRecorder) c_uint;
pub extern fn sfSoundBufferRecorder_getBuffer(soundBufferRecorder: ?*const sfSoundBufferRecorder) ?*const sfSoundBuffer;
pub extern fn sfSoundBufferRecorder_setDevice(soundBufferRecorder: ?*sfSoundBufferRecorder, name: [*c]const u8) sfBool;
pub extern fn sfSoundBufferRecorder_getDevice(soundBufferRecorder: ?*sfSoundBufferRecorder) [*c]const u8;
pub const sfSoundRecorderStartCallback = ?*const fn (?*anyopaque) callconv(.C) sfBool;
pub const sfSoundRecorderProcessCallback = ?*const fn ([*c]const sfInt16, usize, ?*anyopaque) callconv(.C) sfBool;
pub const sfSoundRecorderStopCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn sfSoundRecorder_create(onStart: sfSoundRecorderStartCallback, onProcess: sfSoundRecorderProcessCallback, onStop: sfSoundRecorderStopCallback, userData: ?*anyopaque) ?*sfSoundRecorder;
pub extern fn sfSoundRecorder_destroy(soundRecorder: ?*sfSoundRecorder) void;
pub extern fn sfSoundRecorder_start(soundRecorder: ?*sfSoundRecorder, sampleRate: c_uint) sfBool;
pub extern fn sfSoundRecorder_stop(soundRecorder: ?*sfSoundRecorder) void;
pub extern fn sfSoundRecorder_getSampleRate(soundRecorder: ?*const sfSoundRecorder) c_uint;
pub extern fn sfSoundRecorder_isAvailable() sfBool;
pub extern fn sfSoundRecorder_setProcessingInterval(soundRecorder: ?*sfSoundRecorder, interval: sfTime) void;
pub extern fn sfSoundRecorder_getAvailableDevices(count: [*c]usize) [*c][*c]const u8;
pub extern fn sfSoundRecorder_getDefaultDevice() [*c]const u8;
pub extern fn sfSoundRecorder_setDevice(soundRecorder: ?*sfSoundRecorder, name: [*c]const u8) sfBool;
pub extern fn sfSoundRecorder_getDevice(soundRecorder: ?*sfSoundRecorder) [*c]const u8;
pub extern fn sfSoundRecorder_setChannelCount(soundRecorder: ?*sfSoundRecorder, channelCount: c_uint) void;
pub extern fn sfSoundRecorder_getChannelCount(soundRecorder: ?*const sfSoundRecorder) c_uint;
pub const sfSoundStreamChunk = extern struct {
    samples: [*c]sfInt16 = @import("std").mem.zeroes([*c]sfInt16),
    sampleCount: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const sfSoundStreamGetDataCallback = ?*const fn ([*c]sfSoundStreamChunk, ?*anyopaque) callconv(.C) sfBool;
pub const sfSoundStreamSeekCallback = ?*const fn (sfTime, ?*anyopaque) callconv(.C) void;
pub extern fn sfSoundStream_create(onGetData: sfSoundStreamGetDataCallback, onSeek: sfSoundStreamSeekCallback, channelCount: c_uint, sampleRate: c_uint, userData: ?*anyopaque) ?*sfSoundStream;
pub extern fn sfSoundStream_destroy(soundStream: ?*sfSoundStream) void;
pub extern fn sfSoundStream_play(soundStream: ?*sfSoundStream) void;
pub extern fn sfSoundStream_pause(soundStream: ?*sfSoundStream) void;
pub extern fn sfSoundStream_stop(soundStream: ?*sfSoundStream) void;
pub extern fn sfSoundStream_getStatus(soundStream: ?*const sfSoundStream) sfSoundStatus;
pub extern fn sfSoundStream_getChannelCount(soundStream: ?*const sfSoundStream) c_uint;
pub extern fn sfSoundStream_getSampleRate(soundStream: ?*const sfSoundStream) c_uint;
pub extern fn sfSoundStream_setPitch(soundStream: ?*sfSoundStream, pitch: f32) void;
pub extern fn sfSoundStream_setVolume(soundStream: ?*sfSoundStream, volume: f32) void;
pub extern fn sfSoundStream_setPosition(soundStream: ?*sfSoundStream, position: sfVector3f) void;
pub extern fn sfSoundStream_setRelativeToListener(soundStream: ?*sfSoundStream, relative: sfBool) void;
pub extern fn sfSoundStream_setMinDistance(soundStream: ?*sfSoundStream, distance: f32) void;
pub extern fn sfSoundStream_setAttenuation(soundStream: ?*sfSoundStream, attenuation: f32) void;
pub extern fn sfSoundStream_setPlayingOffset(soundStream: ?*sfSoundStream, timeOffset: sfTime) void;
pub extern fn sfSoundStream_setLoop(soundStream: ?*sfSoundStream, loop: sfBool) void;
pub extern fn sfSoundStream_getPitch(soundStream: ?*const sfSoundStream) f32;
pub extern fn sfSoundStream_getVolume(soundStream: ?*const sfSoundStream) f32;
pub extern fn sfSoundStream_getPosition(soundStream: ?*const sfSoundStream) sfVector3f;
pub extern fn sfSoundStream_isRelativeToListener(soundStream: ?*const sfSoundStream) sfBool;
pub extern fn sfSoundStream_getMinDistance(soundStream: ?*const sfSoundStream) f32;
pub extern fn sfSoundStream_getAttenuation(soundStream: ?*const sfSoundStream) f32;
pub extern fn sfSoundStream_getLoop(soundStream: ?*const sfSoundStream) sfBool;
pub extern fn sfSoundStream_getPlayingOffset(soundStream: ?*const sfSoundStream) sfTime;
pub const sfIpAddress = extern struct {
    address: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub extern const sfIpAddress_None: sfIpAddress;
pub extern const sfIpAddress_Any: sfIpAddress;
pub extern const sfIpAddress_LocalHost: sfIpAddress;
pub extern const sfIpAddress_Broadcast: sfIpAddress;
pub extern fn sfIpAddress_fromString(address: [*c]const u8) sfIpAddress;
pub extern fn sfIpAddress_fromBytes(byte0: sfUint8, byte1: sfUint8, byte2: sfUint8, byte3: sfUint8) sfIpAddress;
pub extern fn sfIpAddress_fromInteger(address: sfUint32) sfIpAddress;
pub extern fn sfIpAddress_toString(address: sfIpAddress, string: [*c]u8) void;
pub extern fn sfIpAddress_toInteger(address: sfIpAddress) sfUint32;
pub extern fn sfIpAddress_getLocalAddress() sfIpAddress;
pub extern fn sfIpAddress_getPublicAddress(timeout: sfTime) sfIpAddress;
pub const struct_sfFtpDirectoryResponse = opaque {};
pub const sfFtpDirectoryResponse = struct_sfFtpDirectoryResponse;
pub const struct_sfFtpListingResponse = opaque {};
pub const sfFtpListingResponse = struct_sfFtpListingResponse;
pub const struct_sfFtpResponse = opaque {};
pub const sfFtpResponse = struct_sfFtpResponse;
pub const struct_sfFtp = opaque {};
pub const sfFtp = struct_sfFtp;
pub const struct_sfHttpRequest = opaque {};
pub const sfHttpRequest = struct_sfHttpRequest;
pub const struct_sfHttpResponse = opaque {};
pub const sfHttpResponse = struct_sfHttpResponse;
pub const struct_sfHttp = opaque {};
pub const sfHttp = struct_sfHttp;
pub const struct_sfPacket = opaque {};
pub const sfPacket = struct_sfPacket;
pub const struct_sfSocketSelector = opaque {};
pub const sfSocketSelector = struct_sfSocketSelector;
pub const struct_sfTcpListener = opaque {};
pub const sfTcpListener = struct_sfTcpListener;
pub const struct_sfTcpSocket = opaque {};
pub const sfTcpSocket = struct_sfTcpSocket;
pub const struct_sfUdpSocket = opaque {};
pub const sfUdpSocket = struct_sfUdpSocket;
pub const sfFtpBinary: c_int = 0;
pub const sfFtpAscii: c_int = 1;
pub const sfFtpEbcdic: c_int = 2;
pub const sfFtpTransferMode = c_uint;
pub const sfFtpRestartMarkerReply: c_int = 110;
pub const sfFtpServiceReadySoon: c_int = 120;
pub const sfFtpDataConnectionAlreadyOpened: c_int = 125;
pub const sfFtpOpeningDataConnection: c_int = 150;
pub const sfFtpOk: c_int = 200;
pub const sfFtpPointlessCommand: c_int = 202;
pub const sfFtpSystemStatus: c_int = 211;
pub const sfFtpDirectoryStatus: c_int = 212;
pub const sfFtpFileStatus: c_int = 213;
pub const sfFtpHelpMessage: c_int = 214;
pub const sfFtpSystemType: c_int = 215;
pub const sfFtpServiceReady: c_int = 220;
pub const sfFtpClosingConnection: c_int = 221;
pub const sfFtpDataConnectionOpened: c_int = 225;
pub const sfFtpClosingDataConnection: c_int = 226;
pub const sfFtpEnteringPassiveMode: c_int = 227;
pub const sfFtpLoggedIn: c_int = 230;
pub const sfFtpFileActionOk: c_int = 250;
pub const sfFtpDirectoryOk: c_int = 257;
pub const sfFtpNeedPassword: c_int = 331;
pub const sfFtpNeedAccountToLogIn: c_int = 332;
pub const sfFtpNeedInformation: c_int = 350;
pub const sfFtpServiceUnavailable: c_int = 421;
pub const sfFtpDataConnectionUnavailable: c_int = 425;
pub const sfFtpTransferAborted: c_int = 426;
pub const sfFtpFileActionAborted: c_int = 450;
pub const sfFtpLocalError: c_int = 451;
pub const sfFtpInsufficientStorageSpace: c_int = 452;
pub const sfFtpCommandUnknown: c_int = 500;
pub const sfFtpParametersUnknown: c_int = 501;
pub const sfFtpCommandNotImplemented: c_int = 502;
pub const sfFtpBadCommandSequence: c_int = 503;
pub const sfFtpParameterNotImplemented: c_int = 504;
pub const sfFtpNotLoggedIn: c_int = 530;
pub const sfFtpNeedAccountToStore: c_int = 532;
pub const sfFtpFileUnavailable: c_int = 550;
pub const sfFtpPageTypeUnknown: c_int = 551;
pub const sfFtpNotEnoughMemory: c_int = 552;
pub const sfFtpFilenameNotAllowed: c_int = 553;
pub const sfFtpInvalidResponse: c_int = 1000;
pub const sfFtpConnectionFailed: c_int = 1001;
pub const sfFtpConnectionClosed: c_int = 1002;
pub const sfFtpInvalidFile: c_int = 1003;
pub const sfFtpStatus = c_uint;
pub extern fn sfFtpListingResponse_destroy(ftpListingResponse: ?*sfFtpListingResponse) void;
pub extern fn sfFtpListingResponse_isOk(ftpListingResponse: ?*const sfFtpListingResponse) sfBool;
pub extern fn sfFtpListingResponse_getStatus(ftpListingResponse: ?*const sfFtpListingResponse) sfFtpStatus;
pub extern fn sfFtpListingResponse_getMessage(ftpListingResponse: ?*const sfFtpListingResponse) [*c]const u8;
pub extern fn sfFtpListingResponse_getCount(ftpListingResponse: ?*const sfFtpListingResponse) usize;
pub extern fn sfFtpListingResponse_getName(ftpListingResponse: ?*const sfFtpListingResponse, index: usize) [*c]const u8;
pub extern fn sfFtpDirectoryResponse_destroy(ftpDirectoryResponse: ?*sfFtpDirectoryResponse) void;
pub extern fn sfFtpDirectoryResponse_isOk(ftpDirectoryResponse: ?*const sfFtpDirectoryResponse) sfBool;
pub extern fn sfFtpDirectoryResponse_getStatus(ftpDirectoryResponse: ?*const sfFtpDirectoryResponse) sfFtpStatus;
pub extern fn sfFtpDirectoryResponse_getMessage(ftpDirectoryResponse: ?*const sfFtpDirectoryResponse) [*c]const u8;
pub extern fn sfFtpDirectoryResponse_getDirectory(ftpDirectoryResponse: ?*const sfFtpDirectoryResponse) [*c]const u8;
pub extern fn sfFtpResponse_destroy(ftpResponse: ?*sfFtpResponse) void;
pub extern fn sfFtpResponse_isOk(ftpResponse: ?*const sfFtpResponse) sfBool;
pub extern fn sfFtpResponse_getStatus(ftpResponse: ?*const sfFtpResponse) sfFtpStatus;
pub extern fn sfFtpResponse_getMessage(ftpResponse: ?*const sfFtpResponse) [*c]const u8;
pub extern fn sfFtp_create() ?*sfFtp;
pub extern fn sfFtp_destroy(ftp: ?*sfFtp) void;
pub extern fn sfFtp_connect(ftp: ?*sfFtp, server: sfIpAddress, port: c_ushort, timeout: sfTime) ?*sfFtpResponse;
pub extern fn sfFtp_loginAnonymous(ftp: ?*sfFtp) ?*sfFtpResponse;
pub extern fn sfFtp_login(ftp: ?*sfFtp, name: [*c]const u8, password: [*c]const u8) ?*sfFtpResponse;
pub extern fn sfFtp_disconnect(ftp: ?*sfFtp) ?*sfFtpResponse;
pub extern fn sfFtp_keepAlive(ftp: ?*sfFtp) ?*sfFtpResponse;
pub extern fn sfFtp_getWorkingDirectory(ftp: ?*sfFtp) ?*sfFtpDirectoryResponse;
pub extern fn sfFtp_getDirectoryListing(ftp: ?*sfFtp, directory: [*c]const u8) ?*sfFtpListingResponse;
pub extern fn sfFtp_changeDirectory(ftp: ?*sfFtp, directory: [*c]const u8) ?*sfFtpResponse;
pub extern fn sfFtp_parentDirectory(ftp: ?*sfFtp) ?*sfFtpResponse;
pub extern fn sfFtp_createDirectory(ftp: ?*sfFtp, name: [*c]const u8) ?*sfFtpResponse;
pub extern fn sfFtp_deleteDirectory(ftp: ?*sfFtp, name: [*c]const u8) ?*sfFtpResponse;
pub extern fn sfFtp_renameFile(ftp: ?*sfFtp, file: [*c]const u8, newName: [*c]const u8) ?*sfFtpResponse;
pub extern fn sfFtp_deleteFile(ftp: ?*sfFtp, name: [*c]const u8) ?*sfFtpResponse;
pub extern fn sfFtp_download(ftp: ?*sfFtp, remoteFile: [*c]const u8, localPath: [*c]const u8, mode: sfFtpTransferMode) ?*sfFtpResponse;
pub extern fn sfFtp_upload(ftp: ?*sfFtp, localFile: [*c]const u8, remotePath: [*c]const u8, mode: sfFtpTransferMode, append: sfBool) ?*sfFtpResponse;
pub extern fn sfFtp_sendCommand(ftp: ?*sfFtp, command: [*c]const u8, parameter: [*c]const u8) ?*sfFtpResponse;
pub const sfHttpGet: c_int = 0;
pub const sfHttpPost: c_int = 1;
pub const sfHttpHead: c_int = 2;
pub const sfHttpPut: c_int = 3;
pub const sfHttpDelete: c_int = 4;
pub const sfHttpMethod = c_uint;
pub const sfHttpOk: c_int = 200;
pub const sfHttpCreated: c_int = 201;
pub const sfHttpAccepted: c_int = 202;
pub const sfHttpNoContent: c_int = 204;
pub const sfHttpResetContent: c_int = 205;
pub const sfHttpPartialContent: c_int = 206;
pub const sfHttpMultipleChoices: c_int = 300;
pub const sfHttpMovedPermanently: c_int = 301;
pub const sfHttpMovedTemporarily: c_int = 302;
pub const sfHttpNotModified: c_int = 304;
pub const sfHttpBadRequest: c_int = 400;
pub const sfHttpUnauthorized: c_int = 401;
pub const sfHttpForbidden: c_int = 403;
pub const sfHttpNotFound: c_int = 404;
pub const sfHttpRangeNotSatisfiable: c_int = 407;
pub const sfHttpInternalServerError: c_int = 500;
pub const sfHttpNotImplemented: c_int = 501;
pub const sfHttpBadGateway: c_int = 502;
pub const sfHttpServiceNotAvailable: c_int = 503;
pub const sfHttpGatewayTimeout: c_int = 504;
pub const sfHttpVersionNotSupported: c_int = 505;
pub const sfHttpInvalidResponse: c_int = 1000;
pub const sfHttpConnectionFailed: c_int = 1001;
pub const sfHttpStatus = c_uint;
pub extern fn sfHttpRequest_create() ?*sfHttpRequest;
pub extern fn sfHttpRequest_destroy(httpRequest: ?*sfHttpRequest) void;
pub extern fn sfHttpRequest_setField(httpRequest: ?*sfHttpRequest, field: [*c]const u8, value: [*c]const u8) void;
pub extern fn sfHttpRequest_setMethod(httpRequest: ?*sfHttpRequest, method: sfHttpMethod) void;
pub extern fn sfHttpRequest_setUri(httpRequest: ?*sfHttpRequest, uri: [*c]const u8) void;
pub extern fn sfHttpRequest_setHttpVersion(httpRequest: ?*sfHttpRequest, major: c_uint, minor: c_uint) void;
pub extern fn sfHttpRequest_setBody(httpRequest: ?*sfHttpRequest, body: [*c]const u8) void;
pub extern fn sfHttpResponse_destroy(httpResponse: ?*sfHttpResponse) void;
pub extern fn sfHttpResponse_getField(httpResponse: ?*const sfHttpResponse, field: [*c]const u8) [*c]const u8;
pub extern fn sfHttpResponse_getStatus(httpResponse: ?*const sfHttpResponse) sfHttpStatus;
pub extern fn sfHttpResponse_getMajorVersion(httpResponse: ?*const sfHttpResponse) c_uint;
pub extern fn sfHttpResponse_getMinorVersion(httpResponse: ?*const sfHttpResponse) c_uint;
pub extern fn sfHttpResponse_getBody(httpResponse: ?*const sfHttpResponse) [*c]const u8;
pub extern fn sfHttp_create() ?*sfHttp;
pub extern fn sfHttp_destroy(http: ?*sfHttp) void;
pub extern fn sfHttp_setHost(http: ?*sfHttp, host: [*c]const u8, port: c_ushort) void;
pub extern fn sfHttp_sendRequest(http: ?*sfHttp, request: ?*const sfHttpRequest, timeout: sfTime) ?*sfHttpResponse;
pub extern fn sfPacket_create() ?*sfPacket;
pub extern fn sfPacket_copy(packet: ?*const sfPacket) ?*sfPacket;
pub extern fn sfPacket_destroy(packet: ?*sfPacket) void;
pub extern fn sfPacket_append(packet: ?*sfPacket, data: ?*const anyopaque, sizeInBytes: usize) void;
pub extern fn sfPacket_getReadPosition(packet: ?*const sfPacket) usize;
pub extern fn sfPacket_clear(packet: ?*sfPacket) void;
pub extern fn sfPacket_getData(packet: ?*const sfPacket) ?*const anyopaque;
pub extern fn sfPacket_getDataSize(packet: ?*const sfPacket) usize;
pub extern fn sfPacket_endOfPacket(packet: ?*const sfPacket) sfBool;
pub extern fn sfPacket_canRead(packet: ?*const sfPacket) sfBool;
pub extern fn sfPacket_readBool(packet: ?*sfPacket) sfBool;
pub extern fn sfPacket_readInt8(packet: ?*sfPacket) sfInt8;
pub extern fn sfPacket_readUint8(packet: ?*sfPacket) sfUint8;
pub extern fn sfPacket_readInt16(packet: ?*sfPacket) sfInt16;
pub extern fn sfPacket_readUint16(packet: ?*sfPacket) sfUint16;
pub extern fn sfPacket_readInt32(packet: ?*sfPacket) sfInt32;
pub extern fn sfPacket_readUint32(packet: ?*sfPacket) sfUint32;
pub extern fn sfPacket_readFloat(packet: ?*sfPacket) f32;
pub extern fn sfPacket_readDouble(packet: ?*sfPacket) f64;
pub extern fn sfPacket_readString(packet: ?*sfPacket, string: [*c]u8) void;
pub extern fn sfPacket_readWideString(packet: ?*sfPacket, string: [*c]wchar_t) void;
pub extern fn sfPacket_writeBool(packet: ?*sfPacket, sfBool) void;
pub extern fn sfPacket_writeInt8(packet: ?*sfPacket, sfInt8) void;
pub extern fn sfPacket_writeUint8(packet: ?*sfPacket, sfUint8) void;
pub extern fn sfPacket_writeInt16(packet: ?*sfPacket, sfInt16) void;
pub extern fn sfPacket_writeUint16(packet: ?*sfPacket, sfUint16) void;
pub extern fn sfPacket_writeInt32(packet: ?*sfPacket, sfInt32) void;
pub extern fn sfPacket_writeUint32(packet: ?*sfPacket, sfUint32) void;
pub extern fn sfPacket_writeFloat(packet: ?*sfPacket, f32) void;
pub extern fn sfPacket_writeDouble(packet: ?*sfPacket, f64) void;
pub extern fn sfPacket_writeString(packet: ?*sfPacket, string: [*c]const u8) void;
pub extern fn sfPacket_writeWideString(packet: ?*sfPacket, string: [*c]const wchar_t) void;
pub extern fn sfSocketSelector_create() ?*sfSocketSelector;
pub extern fn sfSocketSelector_copy(selector: ?*const sfSocketSelector) ?*sfSocketSelector;
pub extern fn sfSocketSelector_destroy(selector: ?*sfSocketSelector) void;
pub extern fn sfSocketSelector_addTcpListener(selector: ?*sfSocketSelector, socket: ?*sfTcpListener) void;
pub extern fn sfSocketSelector_addTcpSocket(selector: ?*sfSocketSelector, socket: ?*sfTcpSocket) void;
pub extern fn sfSocketSelector_addUdpSocket(selector: ?*sfSocketSelector, socket: ?*sfUdpSocket) void;
pub extern fn sfSocketSelector_removeTcpListener(selector: ?*sfSocketSelector, socket: ?*sfTcpListener) void;
pub extern fn sfSocketSelector_removeTcpSocket(selector: ?*sfSocketSelector, socket: ?*sfTcpSocket) void;
pub extern fn sfSocketSelector_removeUdpSocket(selector: ?*sfSocketSelector, socket: ?*sfUdpSocket) void;
pub extern fn sfSocketSelector_clear(selector: ?*sfSocketSelector) void;
pub extern fn sfSocketSelector_wait(selector: ?*sfSocketSelector, timeout: sfTime) sfBool;
pub extern fn sfSocketSelector_isTcpListenerReady(selector: ?*const sfSocketSelector, socket: ?*sfTcpListener) sfBool;
pub extern fn sfSocketSelector_isTcpSocketReady(selector: ?*const sfSocketSelector, socket: ?*sfTcpSocket) sfBool;
pub extern fn sfSocketSelector_isUdpSocketReady(selector: ?*const sfSocketSelector, socket: ?*sfUdpSocket) sfBool;
pub const sfSocketDone: c_int = 0;
pub const sfSocketNotReady: c_int = 1;
pub const sfSocketPartial: c_int = 2;
pub const sfSocketDisconnected: c_int = 3;
pub const sfSocketError: c_int = 4;
pub const sfSocketStatus = c_uint;
pub extern fn sfTcpListener_create() ?*sfTcpListener;
pub extern fn sfTcpListener_destroy(listener: ?*sfTcpListener) void;
pub extern fn sfTcpListener_setBlocking(listener: ?*sfTcpListener, blocking: sfBool) void;
pub extern fn sfTcpListener_isBlocking(listener: ?*const sfTcpListener) sfBool;
pub extern fn sfTcpListener_getLocalPort(listener: ?*const sfTcpListener) c_ushort;
pub extern fn sfTcpListener_listen(listener: ?*sfTcpListener, port: c_ushort, address: sfIpAddress) sfSocketStatus;
pub extern fn sfTcpListener_accept(listener: ?*sfTcpListener, connected: [*c]?*sfTcpSocket) sfSocketStatus;
pub extern fn sfTcpSocket_create() ?*sfTcpSocket;
pub extern fn sfTcpSocket_destroy(socket: ?*sfTcpSocket) void;
pub extern fn sfTcpSocket_setBlocking(socket: ?*sfTcpSocket, blocking: sfBool) void;
pub extern fn sfTcpSocket_isBlocking(socket: ?*const sfTcpSocket) sfBool;
pub extern fn sfTcpSocket_getLocalPort(socket: ?*const sfTcpSocket) c_ushort;
pub extern fn sfTcpSocket_getRemoteAddress(socket: ?*const sfTcpSocket) sfIpAddress;
pub extern fn sfTcpSocket_getRemotePort(socket: ?*const sfTcpSocket) c_ushort;
pub extern fn sfTcpSocket_connect(socket: ?*sfTcpSocket, remoteAddress: sfIpAddress, remotePort: c_ushort, timeout: sfTime) sfSocketStatus;
pub extern fn sfTcpSocket_disconnect(socket: ?*sfTcpSocket) void;
pub extern fn sfTcpSocket_send(socket: ?*sfTcpSocket, data: ?*const anyopaque, size: usize) sfSocketStatus;
pub extern fn sfTcpSocket_sendPartial(socket: ?*sfTcpSocket, data: ?*const anyopaque, size: usize, sent: [*c]usize) sfSocketStatus;
pub extern fn sfTcpSocket_receive(socket: ?*sfTcpSocket, data: ?*anyopaque, size: usize, received: [*c]usize) sfSocketStatus;
pub extern fn sfTcpSocket_sendPacket(socket: ?*sfTcpSocket, packet: ?*sfPacket) sfSocketStatus;
pub extern fn sfTcpSocket_receivePacket(socket: ?*sfTcpSocket, packet: ?*sfPacket) sfSocketStatus;
pub extern fn sfUdpSocket_create() ?*sfUdpSocket;
pub extern fn sfUdpSocket_destroy(socket: ?*sfUdpSocket) void;
pub extern fn sfUdpSocket_setBlocking(socket: ?*sfUdpSocket, blocking: sfBool) void;
pub extern fn sfUdpSocket_isBlocking(socket: ?*const sfUdpSocket) sfBool;
pub extern fn sfUdpSocket_getLocalPort(socket: ?*const sfUdpSocket) c_ushort;
pub extern fn sfUdpSocket_bind(socket: ?*sfUdpSocket, port: c_ushort, address: sfIpAddress) sfSocketStatus;
pub extern fn sfUdpSocket_unbind(socket: ?*sfUdpSocket) void;
pub extern fn sfUdpSocket_send(socket: ?*sfUdpSocket, data: ?*const anyopaque, size: usize, remoteAddress: sfIpAddress, remotePort: c_ushort) sfSocketStatus;
pub extern fn sfUdpSocket_receive(socket: ?*sfUdpSocket, data: ?*anyopaque, size: usize, received: [*c]usize, remoteAddress: [*c]sfIpAddress, remotePort: [*c]c_ushort) sfSocketStatus;
pub extern fn sfUdpSocket_sendPacket(socket: ?*sfUdpSocket, packet: ?*sfPacket, remoteAddress: sfIpAddress, remotePort: c_ushort) sfSocketStatus;
pub extern fn sfUdpSocket_receivePacket(socket: ?*sfUdpSocket, packet: ?*sfPacket, remoteAddress: [*c]sfIpAddress, remotePort: [*c]c_ushort) sfSocketStatus;
pub extern fn sfUdpSocket_maxDatagramSize() c_uint;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 18);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __SEH__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-16";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 16);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 16);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 2);
pub const __SIZEOF_WINT_T__ = @as(c_int, 2);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):94:9
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):100:9
pub const __PTRDIFF_TYPE__ = c_longlong;
pub const __PTRDIFF_FMTd__ = "lld";
pub const __PTRDIFF_FMTi__ = "lli";
pub const __INTPTR_TYPE__ = c_longlong;
pub const __INTPTR_FMTd__ = "lld";
pub const __INTPTR_FMTi__ = "lli";
pub const __SIZE_TYPE__ = c_ulonglong;
pub const __SIZE_FMTo__ = "llo";
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTx__ = "llx";
pub const __SIZE_FMTX__ = "llX";
pub const __WCHAR_TYPE__ = c_ushort;
pub const __WINT_TYPE__ = c_ushort;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulonglong;
pub const __UINTPTR_FMTo__ = "llo";
pub const __UINTPTR_FMTu__ = "llu";
pub const __UINTPTR_FMTx__ = "llx";
pub const __UINTPTR_FMTX__ = "llX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):198:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):220:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):228:9
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):357:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):358:9
pub const __znver2 = @as(c_int, 1);
pub const __znver2__ = @as(c_int, 1);
pub const __tune_znver2__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _WIN32 = @as(c_int, 1);
pub const _WIN64 = @as(c_int, 1);
pub const WIN32 = @as(c_int, 1);
pub const __WIN32 = @as(c_int, 1);
pub const __WIN32__ = @as(c_int, 1);
pub const WINNT = @as(c_int, 1);
pub const __WINNT = @as(c_int, 1);
pub const __WINNT__ = @as(c_int, 1);
pub const WIN64 = @as(c_int, 1);
pub const __WIN64 = @as(c_int, 1);
pub const __WIN64__ = @as(c_int, 1);
pub const __MINGW64__ = @as(c_int, 1);
pub const __MSVCRT__ = @as(c_int, 1);
pub const __MINGW32__ = @as(c_int, 1);
pub const __declspec = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// (no file):423:9
pub const _cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):424:9
pub const __cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):425:9
pub const _stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):426:9
pub const __stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):427:9
pub const _fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):428:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):429:9
pub const _thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):430:9
pub const __thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):431:9
pub const _pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):432:9
pub const __pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):433:9
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __MSVCRT_VERSION__ = @as(c_int, 0xE00);
pub const _WIN32_WINNT = @as(c_int, 0x0a00);
pub const _DEBUG = @as(c_int, 1);
pub const SFML_GRAPHICS_H = "";
pub const SFML_SFML_WINDOW_H = "";
pub const SFML_SYSTEM_H = "";
pub const SFML_CONFIG_H = "";
pub const CSFML_VERSION_MAJOR = @as(c_int, 2);
pub const CSFML_VERSION_MINOR = @as(c_int, 6);
pub const CSFML_VERSION_PATCH = @as(c_int, 1);
pub const CSFML_EXTERN_C = @compileError("unable to translate C expr: unexpected token 'extern'");
// C:\Users\SlinderKid\Desktop\GnE\CSFML\include/SFML/Config.h:43:13
pub const CSFML_SYSTEM_WINDOWS = "";
pub const CSFML_API_EXPORT = @compileError("unable to translate macro: undefined identifier `dllexport`");
// C:\Users\SlinderKid\Desktop\GnE\CSFML\include/SFML/Config.h:84:13
pub const CSFML_API_IMPORT = @compileError("unable to translate macro: undefined identifier `dllimport`");
// C:\Users\SlinderKid\Desktop\GnE\CSFML\include/SFML/Config.h:85:13
pub const CSFML_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Users\SlinderKid\Desktop\GnE\CSFML\include/SFML/Config.h:139:13
pub const sfFalse = @as(c_int, 0);
pub const sfTrue = @as(c_int, 1);
pub const SFML_BUFFER_H = "";
pub const SFML_SYSTEM_EXPORT_H = "";
pub const CSFML_SYSTEM_API = CSFML_API_IMPORT;
pub const SFML_SYSTEM_TYPES_H = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// C:\Zig\zig-windows-x86_64-0.13.0\lib\include/__stddef_offsetof.h:16:9
pub const SFML_CLOCK_H = "";
pub const SFML_TIME_H = "";
pub const SFML_INPUTSTREAM_H = "";
pub const SFML_MUTEX_H = "";
pub const SFML_SLEEP_H = "";
pub const SFML_THREAD_H = "";
pub const SFML_VECTOR2_H = "";
pub const SFML_VECTOR3_H = "";
pub const SFML_CLIPBOARD_H = "";
pub const SFML_WINDOW_EXPORT_H = "";
pub const CSFML_WINDOW_API = CSFML_API_IMPORT;
pub const SFML_WINDOW_TYPES_H = "";
pub const SFML_CONTEXT_H = "";
pub const SFML_WINDOW_H = "";
pub const SFML_EVENT_H = "";
pub const SFML_JOYSTICK_H = "";
pub const SFML_JOYSTICKIDENDIFICATION_H = "";
pub const SFML_KEYBOARD_H = "";
pub const SFML_MOUSE_H = "";
pub const SFML_SENSOR_H = "";
pub const SFML_VIDEOMODE_H = "";
pub const SFML_WINDOWBASE_H = "";
pub const SFML_WINDOWHANDLE_H = "";
pub const SFML_CURSOR_H = "";
pub const SFML_TOUCH_H = "";
pub const SFML_BLENDMODE_H = "";
pub const SFML_GRAPHICS_EXPORT_H = "";
pub const CSFML_GRAPHICS_API = CSFML_API_IMPORT;
pub const SFML_CIRCLESHAPE_H = "";
pub const SFML_COLOR_H = "";
pub const SFML_RECT_H = "";
pub const SFML_TRANSFORM_H = "";
pub const SFML_GRAPHICS_TYPES_H = "";
pub const SFML_CONVEXSHAPE_H = "";
pub const SFML_FONT_H = "";
pub const SFML_FONTINFO_H = "";
pub const SFML_GLYPH_H = "";
pub const SFML_IMAGE_H = "";
pub const SFML_PRIMITIVETYPE_H = "";
pub const SFML_RECTANGLESHAPE_H = "";
pub const SFML_RENDERSTATES_H = "";
pub const SFML_RENDERTEXTURE_H = "";
pub const SFML_VERTEX_H = "";
pub const SFML_RENDERWINDOW_H = "";
pub const SFML_SHADER_H = "";
pub const SFML_GLSL_H = "";
pub const SFML_SHAPE_H = "";
pub const SFML_SPRITE_H = "";
pub const SFML_TEXT_H = "";
pub const SFML_TEXTURE_H = "";
pub const SFML_TRANSFORMABLE_H = "";
pub const SFML_VERTEXARRAY_H = "";
pub const SFML_VERTEXBUFFER_H = "";
pub const SFML_VIEW_H = "";
pub const SFML_AUDIO_H = "";
pub const SFML_LISTENER_H = "";
pub const SFML_AUDIO_EXPORT_H = "";
pub const CSFML_AUDIO_API = CSFML_API_IMPORT;
pub const SFML_MUSIC_H = "";
pub const SFML_SOUNDSTATUS_H = "";
pub const SFML_AUDIO_TYPES_H = "";
pub const SFML_SOUND_H = "";
pub const SFML_SOUNDBUFFER_H = "";
pub const SFML_SOUNDBUFFERRECORDER_H = "";
pub const SFML_SOUNDRECORDER_H = "";
pub const SFML_SOUNDSTREAM_H = "";
pub const SFML_NETWORK_H = "";
pub const SFML_FTP_H = "";
pub const SFML_NETWORK_EXPORT_H = "";
pub const CSFML_NETWORK_API = CSFML_API_IMPORT;
pub const SFML_IPADDRESS_H = "";
pub const SFML_NETWORK_TYPES_H = "";
pub const SFML_HTTP_H = "";
pub const SFML_PACKET_H = "";
pub const SFML_SOCKETSELECTOR_H = "";
pub const SFML_SOCKETSTATUS_H = "";
pub const SFML_TCPLISTENER_H = "";
pub const SFML_TCPSOCKET_H = "";
pub const SFML_UDPSOCKET_H = "";
pub const HWND__ = struct_HWND__;
pub const VkInstance_T = struct_VkInstance_T;
pub const VkSurfaceKHR_T = struct_VkSurfaceKHR_T;
